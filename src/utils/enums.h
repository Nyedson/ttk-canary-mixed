/**
 * The Forgotten Server - a free and open-source MMORPG server emulator
 * Copyright (C) 2019  Mark Samman <mark.samman@gmail.com>
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License along
 * with this program; if not, write to the Free Software Foundation, Inc.,
 * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
 */

#ifndef FS_ENUMS_H_003445999FEE4A67BCECBE918B0124CE
#define FS_ENUMS_H_003445999FEE4A67BCECBE918B0124CE

#include <list>

enum RuleViolationType_t : uint8_t {
	REPORT_TYPE_NAME = 0,
	REPORT_TYPE_STATEMENT = 1,
	REPORT_TYPE_BOT = 2
};

enum RuleViolationReasons_t : uint8_t {
	REPORT_REASON_NAMEINAPPROPRIATE = 0,
	REPORT_REASON_NAMEPOORFORMATTED = 1,
	REPORT_REASON_NAMEADVERTISING = 2,
	REPORT_REASON_NAMEUNFITTING = 3,
	REPORT_REASON_NAMERULEVIOLATION = 4,
	REPORT_REASON_INSULTINGSTATEMENT = 5,
	REPORT_REASON_SPAMMING = 6,
	REPORT_REASON_ADVERTISINGSTATEMENT = 7,
	REPORT_REASON_UNFITTINGSTATEMENT = 8,
	REPORT_REASON_LANGUAGESTATEMENT = 9,
	REPORT_REASON_DISCLOSURE = 10,
	REPORT_REASON_RULEVIOLATION = 11,
	REPORT_REASON_STATEMENT_BUGABUSE = 12,
	REPORT_REASON_UNOFFICIALSOFTWARE = 13,
	REPORT_REASON_PRETENDING = 14,
	REPORT_REASON_HARASSINGOWNERS = 15,
	REPORT_REASON_FALSEINFO = 16,
	REPORT_REASON_ACCOUNTSHARING = 17,
	REPORT_REASON_STEALINGDATA = 18,
	REPORT_REASON_SERVICEATTACKING = 19,
	REPORT_REASON_SERVICEAGREEMENT = 20
};

enum BedItemPart_t : uint8_t {
	BED_NONE_PART,
	BED_PILLOW_PART,
	BED_BLANKET_PART,
};

enum BugReportType_t : uint8_t {
	BUG_CATEGORY_MAP = 0,
	BUG_CATEGORY_TYPO = 1,
	BUG_CATEGORY_TECHNICAL = 2,
	BUG_CATEGORY_OTHER = 3
};

enum ThreadState {
	THREAD_STATE_RUNNING,
	THREAD_STATE_CLOSING,
	THREAD_STATE_TERMINATED,
};

enum itemAttrTypes : uint32_t {
	ITEM_ATTRIBUTE_NONE,

	ITEM_ATTRIBUTE_ACTIONID = 1 << 0,
	ITEM_ATTRIBUTE_UNIQUEID = 1 << 1,
	ITEM_ATTRIBUTE_DESCRIPTION = 1 << 2,
	ITEM_ATTRIBUTE_TEXT = 1 << 3,
	ITEM_ATTRIBUTE_DATE = 1 << 4,
	ITEM_ATTRIBUTE_WRITER = 1 << 5,
	ITEM_ATTRIBUTE_NAME = 1 << 6,
	ITEM_ATTRIBUTE_ARTICLE = 1 << 7,
	ITEM_ATTRIBUTE_PLURALNAME = 1 << 8,
	ITEM_ATTRIBUTE_WEIGHT = 1 << 9,
	ITEM_ATTRIBUTE_ATTACK = 1 << 10,
	ITEM_ATTRIBUTE_DEFENSE = 1 << 11,
	ITEM_ATTRIBUTE_EXTRADEFENSE = 1 << 12,
	ITEM_ATTRIBUTE_ARMOR = 1 << 13,
	ITEM_ATTRIBUTE_HITCHANCE = 1 << 14,
	ITEM_ATTRIBUTE_SHOOTRANGE = 1 << 15,
	ITEM_ATTRIBUTE_OWNER = 1 << 16,
	ITEM_ATTRIBUTE_DURATION = 1 << 17,
	ITEM_ATTRIBUTE_DECAYSTATE = 1 << 18,
	ITEM_ATTRIBUTE_CORPSEOWNER = 1 << 19,
	ITEM_ATTRIBUTE_CHARGES = 1 << 20,
	ITEM_ATTRIBUTE_FLUIDTYPE = 1 << 21,
	ITEM_ATTRIBUTE_DOORID = 1 << 22,
	ITEM_ATTRIBUTE_SPECIAL = 1 << 23,
	ITEM_ATTRIBUTE_IMBUINGSLOTS = 1 << 24,
	ITEM_ATTRIBUTE_OPENCONTAINER = 1 << 25,
	ITEM_ATTRIBUTE_QUICKLOOTCONTAINER = 1 << 26,
	ITEM_ATTRIBUTE_DURATION_TIMESTAMP = 1 << 27,
	ITEM_ATTRIBUTE_BOOST = 1 << 28,
	ITEM_ATTRIBUTE_CUSTOM = 1U << 31,
};

enum ItemDecayType_t : uint8_t {
	DECAY_TYPE_NORMAL = 0,
	DECAY_TYPE_TIMESTAMP = 1,
};

enum VipStatus_t : uint8_t {
	VIPSTATUS_OFFLINE = 0,
	VIPSTATUS_ONLINE = 1,
	VIPSTATUS_PENDING = 2,
	VIPSTATUS_TRAINING = 3
};

enum MarketAction_t {
	MARKETACTION_BUY = 0,
	MARKETACTION_SELL = 1,
};

enum MarketRequest_t {
	MARKETREQUEST_OWN_HISTORY = 1,
	MARKETREQUEST_OWN_OFFERS = 2,
	MARKETREQUEST_SELECT_ITEM = 3
};

enum MarketOfferState_t {
	OFFERSTATE_ACTIVE = 0,
	OFFERSTATE_CANCELLED = 1,
	OFFERSTATE_EXPIRED = 2,
	OFFERSTATE_ACCEPTED = 3,

	OFFERSTATE_ACCEPTEDEX = 255,
};

enum ChannelEvent_t : uint8_t {
	CHANNELEVENT_JOIN = 0,
	CHANNELEVENT_LEAVE = 1,
	CHANNELEVENT_INVITE = 2,
	CHANNELEVENT_EXCLUDE = 3,
};

enum CreatureType_t : uint8_t {
	CREATURETYPE_PLAYER = 0,
	CREATURETYPE_MONSTER = 1,
	CREATURETYPE_NPC = 2,
	CREATURETYPE_SUMMONPLAYER = 3,
	CREATURETYPE_SUMMON_OWN = 3,
	CREATURETYPE_SUMMON_OTHERS = 4,
	CREATURETYPE_HIDDEN = 5,
};

enum OperatingSystem_t : uint8_t {
	CLIENTOS_NONE = 0,

	CLIENTOS_LINUX = 1,
	CLIENTOS_WINDOWS = 2,
	CLIENTOS_FLASH = 3,
	CLIENTOS_NEW_LINUX = 4,
	CLIENTOS_NEW_WINDOWS = 5,
	CLIENTOS_NEW_MAC = 6,

	CLIENTOS_OTCLIENT_LINUX = 10,
	CLIENTOS_OTCLIENT_WINDOWS = 11,
	CLIENTOS_OTCLIENT_MAC = 12,
};


enum PreyBonusType_t : uint8_t
{
	PREY_BONUS_DAMAGE_BOOST = 0,
	PREY_BONUS_DAMAGE_REDUCTION = 1,
	PREY_BONUS_XP_BONUS = 2,
	PREY_BONUS_IMPROVED_LOOT = 3,
	PREY_BONUS_NONE = 4,

	PREY_BONUS_FIRST = PREY_BONUS_DAMAGE_BOOST,
	PREY_BONUS_LAST = PREY_BONUS_IMPROVED_LOOT,
};

enum SpellGroup_t : uint8_t {
	SPELLGROUP_NONE = 0,
	SPELLGROUP_ATTACK = 1,
	SPELLGROUP_HEALING = 2,
	SPELLGROUP_SUPPORT = 3,
	SPELLGROUP_SPECIAL = 4,
	SPELLGROUP_CONJURE = 5, // Deprecated
	SPELLGROUP_CRIPPLING = 6,
	SPELLGROUP_FOCUS = 7,
	SPELLGROUP_ULTIMATESTRIKES = 8,
};

enum SpellType_t : uint8_t {
	SPELL_UNDEFINED = 0,
	SPELL_INSTANT = 1,
	SPELL_RUNE = 2,
};

enum RaceType_t : uint8_t {
	RACE_NONE,
	RACE_VENOM,
	RACE_BLOOD,
	RACE_UNDEAD,
	RACE_FIRE,
	RACE_ENERGY,
};

enum charmRune_t : int8_t {
	CHARM_NONE = -1,
	CHARM_WOUND = 0,
	CHARM_ENFLAME = 1,
	CHARM_POISON = 2,
	CHARM_FREEZE = 3,
	CHARM_ZAP = 4,
	CHARM_CURSE = 5,
	CHARM_CRIPPLE = 6,
	CHARM_PARRY = 7,
	CHARM_DODGE = 8,
	CHARM_ADRENALINE = 9,
	CHARM_NUMB = 10,
	CHARM_CLEANSE = 11,
	CHARM_BLESS = 12,
	CHARM_SCAVENGE = 13,
	CHARM_GUT = 14,
	CHARM_LOW = 15,
	CHARM_DIVINE = 16,
	CHARM_VAMP = 17,
	CHARM_VOID = 18,

	CHARM_LAST = CHARM_VOID,
};

enum charm_t {
	CHARM_UNDEFINED = 0,
	CHARM_OFFENSIVE = 1,
	CHARM_DEFENSIVE = 2,
	CHARM_PASSIVE = 3,
};

enum BestiaryType_t : uint8_t {
	BESTY_RACE_NONE = 0,

	BESTY_RACE_AMPHIBIC = 1,
	BESTY_RACE_AQUATIC = 2,
	BESTY_RACE_BIRD = 3,
	BESTY_RACE_CONSTRUCT = 4,
	BESTY_RACE_DEMON = 5,
	BESTY_RACE_DRAGON = 6,
	BESTY_RACE_ELEMENTAL = 7,
	BESTY_RACE_EXTRA_DIMENSIONAL = 8,
	BESTY_RACE_FEY = 9,
	BESTY_RACE_GIANT = 10,
	BESTY_RACE_HUMAN = 11,
	BESTY_RACE_HUMANOID = 12,
	BESTY_RACE_LYCANTHROPE = 13,
	BESTY_RACE_MAGICAL = 14,
	BESTY_RACE_MAMMAL = 15,
	BESTY_RACE_PLANT = 16,
	BESTY_RACE_REPTILE = 17,
	BESTY_RACE_SLIME = 18,
	BESTY_RACE_UNDEAD = 19,
	BESTY_RACE_VERMIN = 20,

	BESTY_RACE_FIRST = BESTY_RACE_AMPHIBIC,
	BESTY_RACE_LAST = BESTY_RACE_VERMIN,
};

enum CombatType_t : uint16_t {
	COMBAT_NONE = 0,

	COMBAT_PHYSICALDAMAGE = 1 << 0,
	COMBAT_ENERGYDAMAGE = 1 << 1,
	COMBAT_EARTHDAMAGE = 1 << 2,
	COMBAT_FIREDAMAGE = 1 << 3,
	COMBAT_UNDEFINEDDAMAGE = 1 << 4,
	COMBAT_LIFEDRAIN = 1 << 5,
	COMBAT_MANADRAIN = 1 << 6,
	COMBAT_HEALING = 1 << 7,
	COMBAT_DROWNDAMAGE = 1 << 8,
	COMBAT_ICEDAMAGE = 1 << 9,
	COMBAT_HOLYDAMAGE = 1 << 10,
	COMBAT_DEATHDAMAGE = 1 << 11,

	COMBAT_COUNT = 12
};

enum CombatParam_t {
	COMBAT_PARAM_TYPE,
	COMBAT_PARAM_EFFECT,
	COMBAT_PARAM_DISTANCEEFFECT,
	COMBAT_PARAM_BLOCKSHIELD,
	COMBAT_PARAM_BLOCKARMOR,
	COMBAT_PARAM_TARGETCASTERORTOPMOST,
	COMBAT_PARAM_CREATEITEM,
	COMBAT_PARAM_AGGRESSIVE,
	COMBAT_PARAM_DISPEL,
	COMBAT_PARAM_USECHARGES,
	COMBAT_PARAM_CASTSOUND,
	COMBAT_PARAM_IMPACTSOUND,
};

enum SoundEffect_t : uint16_t {
	SOUND_EFFECT_TYPE_SILENCE = 0,
	SOUND_EFFECT_TYPE_HUMAN_CLOSE_ATK_FIST = 1,
	SOUND_EFFECT_TYPE_MONSTER_CLOSE_ATK_FIST = 2,
	SOUND_EFFECT_TYPE_MELEE_ATK_SWORD = 3,
	SOUND_EFFECT_TYPE_MELEE_ATK_CLUB = 4,
	SOUND_EFFECT_TYPE_MELEE_ATK_AXE = 5,
	SOUND_EFFECT_TYPE_DIST_ATK_BOW = 6,
	SOUND_EFFECT_TYPE_DIST_ATK_CROSSBOW = 7,
	SOUND_EFFECT_TYPE_DIST_ATK_THROW = 8,
	SOUND_EFFECT_TYPE_MAGICAL_RANGE_ATK = 9,
	SOUND_EFFECT_TYPE_SPELL_OR_RUNE = 10, // Only secondary
	SOUND_EFFECT_TYPE_OTHER = 11, // Only secondary
	SOUND_EFFECT_TYPE_PHYSICAL_RANGE_MISS = 12,
	SOUND_EFFECT_TYPE_DIST_ATK_BOW_SHOT = 13,
	SOUND_EFFECT_TYPE_DIST_ATK_CROSSBOW_SHOT = 14,
	SOUND_EFFECT_TYPE_DIST_ATK_THROW_SHOT = 15,
	SOUND_EFFECT_TYPE_DIST_ATK_ROD_SHOT = 16,
	SOUND_EFFECT_TYPE_DIST_ATK_WAND_SHOT = 17,
	SOUND_EFFECT_TYPE_BURST_ARROW_EFFECT = 18,
	SOUND_EFFECT_TYPE_DIAMOND_ARROW_EFFECT = 19,
	SOUND_EFFECT_TYPE_NO_DAMAGE = 20,
	SOUND_EFFECT_TYPE_MONSTER_MELEE_ATK_FIST = 100,
	SOUND_EFFECT_TYPE_MONSTER_MELEE_ATK_CLAW = 101,
	SOUND_EFFECT_TYPE_MONSTER_MELEE_ATK_BITE = 102,
	SOUND_EFFECT_TYPE_MONSTER_MELEE_ATK_RIP = 103,
	SOUND_EFFECT_TYPE_MONSTER_MELEE_ATK_ACID = 104,
	SOUND_EFFECT_TYPE_MONSTER_MELEE_ATK_MAGIC = 105,
	SOUND_EFFECT_TYPE_MONSTER_MELEE_ATK_ETHEREAL = 106,
	SOUND_EFFECT_TYPE_MONSTER_MELEE_ATK_CONSTRUCT = 107,
	SOUND_EFFECT_TYPE_SPELL_LIGHT_HEALING = 1001,
	SOUND_EFFECT_TYPE_SPELL_INTENSE_HEALING = 1002,
	SOUND_EFFECT_TYPE_SPELL_ULTIMATE_HEALING = 1003,
	SOUND_EFFECT_TYPE_SPELL_INTENSE_HEALING_RUNE = 1004,
	SOUND_EFFECT_TYPE_SPELL_ULTIMATE_HEALING_RUNE = 1005,
	SOUND_EFFECT_TYPE_SPELL_HASTE = 1006,
	SOUND_EFFECT_TYPE_SPELL_LIGHT_MAGIC_MISSILE_RUNE = 1007,
	SOUND_EFFECT_TYPE_SPELL_HEAVY_MAGIC_MISSILE_RUNE = 1008,
	SOUND_EFFECT_TYPE_SPELL_SUMMON_CREATURE = 1009,
	SOUND_EFFECT_TYPE_SPELL_LIGHT = 1010,
	SOUND_EFFECT_TYPE_SPELL_GREAT_LIGHT = 1011,
	SOUND_EFFECT_TYPE_SPELL_CONVINCE_CREATURE_RUNE = 1012,
	SOUND_EFFECT_TYPE_SPELL_ENERGY_WAVE = 1013,
	SOUND_EFFECT_TYPE_SPELL_CHAMELEON_RUNE = 1014,
	SOUND_EFFECT_TYPE_SPELL_FIREBALL_RUNE = 1015,
	SOUND_EFFECT_TYPE_SPELL_GREAT_FIREBALL_RUNE = 1016,
	SOUND_EFFECT_TYPE_SPELL_FIRE_BOMB_RUNE = 1017,
	SOUND_EFFECT_TYPE_SPELL_EXPLOSION_RUNE = 1018,
	SOUND_EFFECT_TYPE_SPELL_FIRE_WAVE = 1019,
	SOUND_EFFECT_TYPE_SPELL_FIND_PERSON = 1020,
	SOUND_EFFECT_TYPE_SPELL_SUDDENDEATH_RUNE = 1021,
	SOUND_EFFECT_TYPE_SPELL_ENERGY_BEAM = 1022,
	SOUND_EFFECT_TYPE_SPELL_GREAT_ENERGY_BEAM = 1023,
	SOUND_EFFECT_TYPE_SPELL_HELL_SCORE = 1024,
	SOUND_EFFECT_TYPE_SPELL_FIRE_FIELD_RUNE = 1025,
	SOUND_EFFECT_TYPE_SPELL_POISON_FIELD_RUNE = 1026,
	SOUND_EFFECT_TYPE_SPELL_ENERGY_FIELD_RUNE = 1027,
	SOUND_EFFECT_TYPE_SPELL_FIRE_WALL_RUNE = 1028,
	SOUND_EFFECT_TYPE_SPELL_CURE_POISON = 1029,
	SOUND_EFFECT_TYPE_SPELL_DESTROY_FIELD_RUNE = 1030,
	SOUND_EFFECT_TYPE_SPELL_CURE_POISON_RUNE = 1031,
	SOUND_EFFECT_TYPE_SPELL_POISON_WALL_RUNE = 1032,
	SOUND_EFFECT_TYPE_SPELL_ENERGY_WALL_RUNE = 1033,
	SOUND_EFFECT_TYPE_SPELL_SALVATION = 1036,
	SOUND_EFFECT_TYPE_SPELL_CREATURE_ILLUSION = 1038,
	SOUND_EFFECT_TYPE_SPELL_STRONG_HASTE = 1039,
	SOUND_EFFECT_TYPE_SPELL_FOOD = 1042,
	SOUND_EFFECT_TYPE_SPELL_STRONG_ICE_WAVE = 1043,
	SOUND_EFFECT_TYPE_SPELL_MAGIC_SHIELD = 1044,
	SOUND_EFFECT_TYPE_SPELL_INVISIBLE = 1045,
	SOUND_EFFECT_TYPE_SPELL_CONJURE_EXPLOSIVE_ARROW = 1049,
	SOUND_EFFECT_TYPE_SPELL_SOUL_FIRE_RUNE = 1050,
	SOUND_EFFECT_TYPE_SPELL_CONJURE_ARROW = 1051,
	SOUND_EFFECT_TYPE_SPELL_PARALYSE_RUNE = 1054,
	SOUND_EFFECT_TYPE_SPELL_ENERGY_BOMB_RUNE = 1055,
	SOUND_EFFECT_TYPE_SPELL_WRATH_OF_NATURE = 1056,
	SOUND_EFFECT_TYPE_SPELL_STRONG_ETHEREAL_SPEAR = 1057,
	SOUND_EFFECT_TYPE_SPELL_FRONT_SWEEP = 1059,
	SOUND_EFFECT_TYPE_SPELL_BRUTAL_STRIKE = 1061,
	SOUND_EFFECT_TYPE_SPELL_ANNIHILATION = 1062,
	SOUND_EFFECT_TYPE_SPELL_INVITE_GUESTS = 1071,
	SOUND_EFFECT_TYPE_SPELL_INVITE_SUBOWNERS = 1072,
	SOUND_EFFECT_TYPE_SPELL_KICK_GUEST = 1073,
	SOUND_EFFECT_TYPE_SPELL_EDIT_DOOR = 1074,
	SOUND_EFFECT_TYPE_SPELL_ULTIMATE_LIGHT = 1075,
	SOUND_EFFECT_TYPE_SPELL_MAGIC_ROPE = 1076,
	SOUND_EFFECT_TYPE_SPELL_STALAGMITE_RUNE = 1077,
	SOUND_EFFECT_TYPE_SPELL_DISINTEGRATE_RUNE = 1078,
	SOUND_EFFECT_TYPE_SPELL_BERSERK = 1080,
	SOUND_EFFECT_TYPE_SPELL_LEVITATE = 1081,
	SOUND_EFFECT_TYPE_SPELL_MASS_HEALING = 1082,
	SOUND_EFFECT_TYPE_SPELL_ANIMATE_DEAD_RUNE = 1083,
	SOUND_EFFECT_TYPE_SPELL_HEAL_FRIEND = 1084,
	SOUND_EFFECT_TYPE_SPELL_UNDEAD_LEGION = 1085,
	SOUND_EFFECT_TYPE_SPELL_MAGIC_WALL_RUNE = 1086,
	SOUND_EFFECT_TYPE_SPELL_DEATH_STRIKE = 1087,
	SOUND_EFFECT_TYPE_SPELL_ENERGY_STRIKE = 1088,
	SOUND_EFFECT_TYPE_SPELL_FLAME_STRIKE = 1089,
	SOUND_EFFECT_TYPE_SPELL_CANCEL_INVISIBILITY = 1090,
	SOUND_EFFECT_TYPE_SPELL_POISON_BOMB_RUNE = 1091,
	SOUND_EFFECT_TYPE_SPELL_CONJURE_WAND_OF_DARKNESS = 1092,
	SOUND_EFFECT_TYPE_SPELL_CHALLENGE = 1093,
	SOUND_EFFECT_TYPE_SPELL_WILD_GROWTH_RUNE = 1094,
	SOUND_EFFECT_TYPE_SPELL_FIERCE_BERSERK = 1105,
	SOUND_EFFECT_TYPE_SPELL_GROUNDSHAKER = 1106,
	SOUND_EFFECT_TYPE_SPELL_WHIRLWIND_THROW = 1107,
	SOUND_EFFECT_TYPE_SPELL_ENCHANT_SPEAR = 1110,
	SOUND_EFFECT_TYPE_SPELL_ETHEREAL_SPEAR = 1111,
	SOUND_EFFECT_TYPE_SPELL_ICE_STRIKE = 1112,
	SOUND_EFFECT_TYPE_SPELL_TERRA_STRIKE = 1113,
	SOUND_EFFECT_TYPE_SPELL_ICICLE_RUNE = 1114,
	SOUND_EFFECT_TYPE_SPELL_AVALANCHE_RUNE = 1115,
	SOUND_EFFECT_TYPE_SPELL_STONE_SHOWER_RUNE = 1116,
	SOUND_EFFECT_TYPE_SPELL_THUNDERSTORM_RUNE = 1117,
	SOUND_EFFECT_TYPE_SPELL_ETERNAL_WINTER = 1118,
	SOUND_EFFECT_TYPE_SPELL_RAGE_OF_THE_SKIES = 1119,
	SOUND_EFFECT_TYPE_SPELL_TERRA_WAVE = 1120,
	SOUND_EFFECT_TYPE_SPELL_ICE_WAVE = 1121,
	SOUND_EFFECT_TYPE_SPELL_DIVINE_MISSILE = 1122,
	SOUND_EFFECT_TYPE_SPELL_WOUND_CLEANSING = 1123,
	SOUND_EFFECT_TYPE_SPELL_DIVINE_CALDERA = 1124,
	SOUND_EFFECT_TYPE_SPELL_DIVINE_HEALING = 1125,
	SOUND_EFFECT_TYPE_SPELL_TRAIN_PARTY = 1126,
	SOUND_EFFECT_TYPE_SPELL_PROTECT_PARTY = 1127,
	SOUND_EFFECT_TYPE_SPELL_HEAL_PARTY = 1128,
	SOUND_EFFECT_TYPE_SPELL_ENCHANT_PARTY = 1129,
	SOUND_EFFECT_TYPE_SPELL_HOLY_MISSILE_RUNE = 1130,
	SOUND_EFFECT_TYPE_SPELL_CHARGE = 1131,
	SOUND_EFFECT_TYPE_SPELL_PROTECTOR = 1132,
	SOUND_EFFECT_TYPE_SPELL_BLOOD_RAGE = 1133,
	SOUND_EFFECT_TYPE_SPELL_SWIFT_FOOT = 1134,
	SOUND_EFFECT_TYPE_SPELL_SHARPSHOOTER = 1135,
	SOUND_EFFECT_TYPE_SPELL_IGNITE = 1138,
	SOUND_EFFECT_TYPE_SPELL_CURSE = 1139,
	SOUND_EFFECT_TYPE_SPELL_ELECTRIFY = 1140,
	SOUND_EFFECT_TYPE_SPELL_INFLICT_WOUND = 1141,
	SOUND_EFFECT_TYPE_SPELL_ENVENOM = 1142,
	SOUND_EFFECT_TYPE_SPELL_HOLY_FLASH = 1143,
	SOUND_EFFECT_TYPE_SPELL_CURE_BLEEDING = 1144,
	SOUND_EFFECT_TYPE_SPELL_CURE_BURNING = 1145,
	SOUND_EFFECT_TYPE_SPELL_CURE_ELECTRIFICATION = 1146,
	SOUND_EFFECT_TYPE_SPELL_CURE_CURSE = 1147,
	SOUND_EFFECT_TYPE_SPELL_PHYSICAL_STRIKE = 1148,
	SOUND_EFFECT_TYPE_SPELL_LIGHTNING = 1149,
	SOUND_EFFECT_TYPE_SPELL_STRONG_FLAME_STRIKE = 1150,
	SOUND_EFFECT_TYPE_SPELL_STRONG_ENERGY_STRIKE = 1151,
	SOUND_EFFECT_TYPE_SPELL_STRONG_ICE_STRIKE = 1152,
	SOUND_EFFECT_TYPE_SPELL_STRONG_TERRA_STRIKE = 1153,
	SOUND_EFFECT_TYPE_SPELL_ULTIMATE_FLAME_STRIKE = 1154,
	SOUND_EFFECT_TYPE_SPELL_ULTIMATE_ENERGY_STRIKE = 1155,
	SOUND_EFFECT_TYPE_SPELL_ULTIMATE_ICE_STRIKE = 1156,
	SOUND_EFFECT_TYPE_SPELL_ULTIMATE_TERRA_STRIKE = 1157,
	SOUND_EFFECT_TYPE_SPELL_INTENSE_WOUND_CLEANSING = 1158,
	SOUND_EFFECT_TYPE_SPELL_RECOVERY = 1159,
	SOUND_EFFECT_TYPE_SPELL_INTENSE_RECOVERY = 1160,
	SOUND_EFFECT_TYPE_SPELL_PRACTISE_HEALING = 1166,
	SOUND_EFFECT_TYPE_SPELL_PRACTISE_FIRE_WAVE = 1167,
	SOUND_EFFECT_TYPE_SPELL_PRACTISE_MAGIC_MISSILE_RUNE = 1168,
	SOUND_EFFECT_TYPE_SPELL_APPRENT_ICES_STRIKE = 1169,
	SOUND_EFFECT_TYPE_SPELL_MUD_ATTACK = 1172,
	SOUND_EFFECT_TYPE_SPELL_CHILL_OUT = 1173,
	SOUND_EFFECT_TYPE_SPELL_MAGIC_PATCH = 1174,
	SOUND_EFFECT_TYPE_SPELL_BRUISE_BANE = 1175,
	SOUND_EFFECT_TYPE_SPELL_ARROW_CALL = 1176,
	SOUND_EFFECT_TYPE_SPELL_BUZZ = 1177,
	SOUND_EFFECT_TYPE_SPELL_SCORCH = 1178,
	SOUND_EFFECT_TYPE_SPELL_LIGHTEST_MISSILE_RUNE = 1179,
	SOUND_EFFECT_TYPE_SPELL_LIGHT_STONE_SHOWER_RUNE = 1180,
	SOUND_EFFECT_TYPE_SPELL_SUMMON_KNIGHT_FAMILIAR = 1194,
	SOUND_EFFECT_TYPE_SPELL_SUMMON_PALADIN_FAMILIAR = 1195,
	SOUND_EFFECT_TYPE_SPELL_SUMMON_SORCERER_FAMILIAR = 1196,
	SOUND_EFFECT_TYPE_SPELL_SUMMON_DRUID_FAMILIAR = 1197,
	SOUND_EFFECT_TYPE_SPELL_CHIVALROUS_CHALLENGE = 1237,
	SOUND_EFFECT_TYPE_SPELL_DIVINE_DAZZLE = 1238,
	SOUND_EFFECT_TYPE_SPELL_FAIR_WOUND_CLEANSING = 1239,
	SOUND_EFFECT_TYPE_SPELL_GREAT_FIRE_WAVE = 1240,
	SOUND_EFFECT_TYPE_SPELL_RESTORATION = 1241,
	SOUND_EFFECT_TYPE_SPELL_NATURES_EMBRACE = 1242,
	SOUND_EFFECT_TYPE_SPELL_EXPOSE_WEAKNESS = 1243,
	SOUND_EFFECT_TYPE_SPELL_SAP_STRENGTH = 1244,
	SOUND_EFFECT_TYPE_SPELL_CANCEL_MAGIC_SHIELD = 1245,
	SOUND_EFFECT_TYPE_MONSTER_SPELL_SINGLE_TARGET_FIRE = 2002,
	SOUND_EFFECT_TYPE_MONSTER_SPELL_SINGLE_TARGET_ENERGY = 2003,
	SOUND_EFFECT_TYPE_MONSTER_SPELL_SINGLE_TARGET_EARTH = 2004,
	SOUND_EFFECT_TYPE_MONSTER_SPELL_SINGLE_TARGET_ICE = 2005,
	SOUND_EFFECT_TYPE_MONSTER_SPELL_SINGLE_TARGET_DEATH = 2006,
	SOUND_EFFECT_TYPE_MONSTER_SPELL_SINGLE_TARGET_HOLY = 2007,
	SOUND_EFFECT_TYPE_MONSTER_SPELL_SINGLE_TARGET_HIT = 2008,
	SOUND_EFFECT_TYPE_MONSTER_SPELL_SINGLE_TARGET_LIFEDRAIN = 2009,
	SOUND_EFFECT_TYPE_MONSTER_SPELL_SINGLE_TARGET_MANADRAIN = 2010,
	SOUND_EFFECT_TYPE_MONSTER_SPELL_SINGLE_TARGET_DROWNING = 2011,
	SOUND_EFFECT_TYPE_MONSTER_SPELL_SINGLE_TARGET_BLEEDING = 2012,
	SOUND_EFFECT_TYPE_MONSTER_SPELL_SINGLE_TARGET_HEALING = 2013,
	SOUND_EFFECT_TYPE_MONSTER_SPELL_SMALL_AREA_FIRE = 2015,
	SOUND_EFFECT_TYPE_MONSTER_SPELL_SMALL_AREA_ENERGY = 2016,
	SOUND_EFFECT_TYPE_MONSTER_SPELL_SMALL_AREA_EARTH = 2017,
	SOUND_EFFECT_TYPE_MONSTER_SPELL_SMALL_AREA_ICE = 2018,
	SOUND_EFFECT_TYPE_MONSTER_SPELL_SMALL_AREA_DEATH = 2019,
	SOUND_EFFECT_TYPE_MONSTER_SPELL_SMALL_AREA_HOLY = 2020,
	SOUND_EFFECT_TYPE_MONSTER_SPELL_SMALL_AREA_HIT = 2021,
	SOUND_EFFECT_TYPE_MONSTER_SPELL_SMALL_AREA_LIFEDRAIN = 2022,
	SOUND_EFFECT_TYPE_MONSTER_SPELL_SMALL_AREA_MANADRAIN = 2023,
	SOUND_EFFECT_TYPE_MONSTER_SPELL_SMALL_AREA_DROWNING = 2024,
	SOUND_EFFECT_TYPE_MONSTER_SPELL_SMALL_AREA_BLEEDING = 2025,
	SOUND_EFFECT_TYPE_MONSTER_SPELL_SMALL_AREA_HEALING = 2026,
	SOUND_EFFECT_TYPE_MONSTER_SPELL_LARGE_AREA_FIRE = 2028,
	SOUND_EFFECT_TYPE_MONSTER_SPELL_LARGE_AREA_ENERGY = 2029,
	SOUND_EFFECT_TYPE_MONSTER_SPELL_LARGE_AREA_EARTH = 2030,
	SOUND_EFFECT_TYPE_MONSTER_SPELL_LARGE_AREA_ICE = 2031,
	SOUND_EFFECT_TYPE_MONSTER_SPELL_LARGE_AREA_DEATH = 2032,
	SOUND_EFFECT_TYPE_MONSTER_SPELL_LARGE_AREA_HOLY = 2033,
	SOUND_EFFECT_TYPE_MONSTER_SPELL_LARGE_AREA_HIT = 2034,
	SOUND_EFFECT_TYPE_MONSTER_SPELL_LARGE_AREA_LIFEDRAIN = 2035,
	SOUND_EFFECT_TYPE_MONSTER_SPELL_LARGE_AREA_MANADRAIN = 2036,
	SOUND_EFFECT_TYPE_MONSTER_SPELL_LARGE_AREA_DROWNING = 2037,
	SOUND_EFFECT_TYPE_MONSTER_SPELL_LARGE_AREA_BLEEDING = 2038,
	SOUND_EFFECT_TYPE_MONSTER_SPELL_LARGE_AREA_HEALING = 2039,
	SOUND_EFFECT_TYPE_MONSTER_SPELL_WAVE_FIRE = 2041,
	SOUND_EFFECT_TYPE_MONSTER_SPELL_WAVE_ENERGY = 2042,
	SOUND_EFFECT_TYPE_MONSTER_SPELL_WAVE_EARTH = 2043,
	SOUND_EFFECT_TYPE_MONSTER_SPELL_WAVE_ICE = 2044,
	SOUND_EFFECT_TYPE_MONSTER_SPELL_WAVE_DEATH = 2045,
	SOUND_EFFECT_TYPE_MONSTER_SPELL_WAVE_HOLY = 2046,
	SOUND_EFFECT_TYPE_MONSTER_SPELL_WAVE_HIT = 2047,
	SOUND_EFFECT_TYPE_MONSTER_SPELL_WAVE_LIFEDRAIN = 2048,
	SOUND_EFFECT_TYPE_MONSTER_SPELL_WAVE_MANADRAIN = 2049,
	SOUND_EFFECT_TYPE_MONSTER_SPELL_WAVE_DROWNING = 2050,
	SOUND_EFFECT_TYPE_MONSTER_SPELL_WAVE_BLEEDING = 2051,
	SOUND_EFFECT_TYPE_MONSTER_SPELL_WAVE_HEALING = 2052,
	SOUND_EFFECT_TYPE_MONSTER_SPELL_DELETEFIELD = 2054,
	SOUND_EFFECT_TYPE_MONSTER_SPELL_CHALLENGE = 2055,
	SOUND_EFFECT_TYPE_MONSTER_SPELL_SPEED = 2056,
	SOUND_EFFECT_TYPE_MONSTER_SPELL_DRUNKEN = 2057,
	SOUND_EFFECT_TYPE_MONSTER_SPELL_STRENGTH = 2058,
	SOUND_EFFECT_TYPE_MONSTER_SPELL_OUTFIT = 2059,
	SOUND_EFFECT_TYPE_MONSTER_SPELL_SUMMON = 2060,
	SOUND_EFFECT_TYPE_MONSTER_SPELL_MAGICLEVEL = 2061,
	SOUND_EFFECT_TYPE_MONSTER_SPELL_TELEPORT = 2062,
	SOUND_EFFECT_TYPE_MONSTER_SPELL_HEX = 2063,
	SOUND_EFFECT_TYPE_MONSTER_SPELL_SUPER_DRUNKEN = 2064,
	SOUND_EFFECT_TYPE_MONSTER_SPELL_ROOT = 2065,
	SOUND_EFFECT_TYPE_MONSTER_SPELL_FEAR = 2066,
	SOUND_EFFECT_TYPE_MONSTER_SPELL_HIGHRISK_TELEPORT = 2067,
	SOUND_EFFECT_TYPE_MONSTER_SPELL_MINION = 2068,
	SOUND_EFFECT_TYPE_MONSTER_SPELL_AGONY = 2069, // No sound ingame
	SOUND_EFFECT_TYPE_AMPHIBIC_BARK = 2500,
	SOUND_EFFECT_TYPE_AQUATIC_BEAST_BARK = 2501,
	SOUND_EFFECT_TYPE_AQUATIC_CRITTER_BARK = 2502,
	SOUND_EFFECT_TYPE_AQUATIC_DEEPLING_BARK = 2503,
	SOUND_EFFECT_TYPE_AQUATIC_QUARA_BARK = 2504,
	SOUND_EFFECT_TYPE_BIRD_BARK = 2505,
	SOUND_EFFECT_TYPE_CONSTRUCT_BARK = 2506,
	SOUND_EFFECT_TYPE_DEMON_BARK = 2507,
	SOUND_EFFECT_TYPE_DRAGON_BARK = 2508,
	SOUND_EFFECT_TYPE_ELEMENTAL_EARTH_BARK = 2509,
	SOUND_EFFECT_TYPE_ELEMENTAL_ENERGY_BARK = 2510,
	SOUND_EFFECT_TYPE_ELEMENTAL_FIRE_BARK = 2511,
	SOUND_EFFECT_TYPE_ELEMENTAL_WATER_BARK = 2512,
	SOUND_EFFECT_TYPE_EXTRA_DIMENSIONAL_BEAST_BARK = 2513,
	SOUND_EFFECT_TYPE_EXTRA_DIMENSIONAL_ENERGY_BARK = 2514,
	SOUND_EFFECT_TYPE_EXTRA_DIMENSIONAL_HORROR_BARK = 2515,
	SOUND_EFFECT_TYPE_FEY_BARK = 2516,
	SOUND_EFFECT_TYPE_GIANT_BARK = 2517,
	SOUND_EFFECT_TYPE_HUMAN_FEMALE_BARK = 2518,
	SOUND_EFFECT_TYPE_HUMAN_MALE_BARK = 2519,
	SOUND_EFFECT_TYPE_HUMANOID_GOBLIN_BARK = 2520,
	SOUND_EFFECT_TYPE_HUMANOID_ORC_BARK = 2521,
	SOUND_EFFECT_TYPE_LYCANTHROPE_BARK = 2522,
	SOUND_EFFECT_TYPE_MAGICAL_ENERGY_BARK = 2523,
	SOUND_EFFECT_TYPE_MAGICAL_HORROR_BARK = 2524,
	SOUND_EFFECT_TYPE_MAMMAL_BEAR_BARK = 2525,
	SOUND_EFFECT_TYPE_MAMMAL_CRITTER_BARK = 2526,
	SOUND_EFFECT_TYPE_MAMMAL_DOG_BARK = 2527,
	SOUND_EFFECT_TYPE_MAMMAL_ELEPHANT_BARK = 2528,
	SOUND_EFFECT_TYPE_MAMMAL_FERAL_BARK = 2529,
	SOUND_EFFECT_TYPE_MAMMAL_HORSE_BARK = 2530,
	SOUND_EFFECT_TYPE_MAMMAL_MAMMOTH_BARK = 2531, // No sound ingame
	SOUND_EFFECT_TYPE_MONSTER_BARK = 2532,
	SOUND_EFFECT_TYPE_PHANTOM_BARK = 2533,
	SOUND_EFFECT_TYPE_PLANT_BARK = 2534,
	SOUND_EFFECT_TYPE_REPTILE_LARGE_BARK = 2535,
	SOUND_EFFECT_TYPE_REPTILE_SMALL_BARK = 2536,
	SOUND_EFFECT_TYPE_SLIME_BARK = 2537,
	SOUND_EFFECT_TYPE_UNDEAD_BARK = 2538,
	SOUND_EFFECT_TYPE_VERMIN_CRITTER_BARK = 2539,
	SOUND_EFFECT_TYPE_VERMIN_INSECT_BARK = 2540,
	SOUND_EFFECT_TYPE_VERMIN_ROTWORM_BARK = 2541,
	SOUND_EFFECT_TYPE_HUMAN_SAGE_BARK = 2542, //  No sound ingame
	SOUND_EFFECT_TYPE_HUMAN_CRONE_BARK = 2543, // No sound ingame
	SOUND_EFFECT_TYPE_APE_BARK = 2544, // No sound ingame
	SOUND_EFFECT_TYPE_AMPHIBIC_DEATH = 2600,
	SOUND_EFFECT_TYPE_AQUATIC_BEAST_DEATH = 2601,
	SOUND_EFFECT_TYPE_AQUATIC_CRITTER_DEATH = 2602,
	SOUND_EFFECT_TYPE_AQUATIC_DEEPLING_DEATH = 2603,
	SOUND_EFFECT_TYPE_AQUATIC_QUARA_DEATH = 2604,
	SOUND_EFFECT_TYPE_BIRD_DEATH = 2605,
	SOUND_EFFECT_TYPE_CONSTRUCT_DEATH = 2606,
	SOUND_EFFECT_TYPE_DEMON_DEATH = 2607,
	SOUND_EFFECT_TYPE_DRAGON_DEATH = 2608,
	SOUND_EFFECT_TYPE_ELEMENTAL_EARTH_DEATH = 2609,
	SOUND_EFFECT_TYPE_ELEMENTAL_ENERGY_DEATH = 2610,
	SOUND_EFFECT_TYPE_ELEMENTAL_FIRE_DEATH = 2611,
	SOUND_EFFECT_TYPE_ELEMENTAL_WATER_DEATH = 2612,
	SOUND_EFFECT_TYPE_EXTRA_DIMENSIONAL_BEAST_DEATH = 2613,
	SOUND_EFFECT_TYPE_EXTRA_DIMENSIONAL_ENERGY_DEATH = 2614,
	SOUND_EFFECT_TYPE_EXTRA_DIMENSIONAL_HORROR_DEATH = 2615,
	SOUND_EFFECT_TYPE_FEY_DEATH = 2616,
	SOUND_EFFECT_TYPE_GIANT_DEATH = 2617,
	SOUND_EFFECT_TYPE_HUMAN_FEMALE_DEATH = 2618,
	SOUND_EFFECT_TYPE_HUMAN_MALE_DEATH = 2619,
	SOUND_EFFECT_TYPE_HUMANOID_GOBLIN_DEATH = 2620,
	SOUND_EFFECT_TYPE_HUMANOID_ORC_DEATH = 2621,
	SOUND_EFFECT_TYPE_LYCANTHROPE_DEATH = 2622,
	SOUND_EFFECT_TYPE_MAGICAL_ENERGY_DEATH = 2623,
	SOUND_EFFECT_TYPE_MAGICAL_HORROR_DEATH = 2624,
	SOUND_EFFECT_TYPE_MAMMAL_BEAR_DEATH = 2625,
	SOUND_EFFECT_TYPE_MAMMAL_CRITTER_DEATH = 2626,
	SOUND_EFFECT_TYPE_MAMMAL_DOG_DEATH = 2627,
	SOUND_EFFECT_TYPE_MAMMAL_ELEPHANT_DEATH = 2628,
	SOUND_EFFECT_TYPE_MAMMAL_FERAL_DEATH = 2629,
	SOUND_EFFECT_TYPE_MAMMAL_HORSE_DEATH = 2630,
	SOUND_EFFECT_TYPE_MAMMAL_MAMMOTH_DEATH = 2631, // No sound ingame
	SOUND_EFFECT_TYPE_MONSTER_DEATH = 2632,
	SOUND_EFFECT_TYPE_PHANTOM_DEATH = 2633,
	SOUND_EFFECT_TYPE_PLANT_DEATH = 2634,
	SOUND_EFFECT_TYPE_REPTILE_LARGE_DEATH = 2635,
	SOUND_EFFECT_TYPE_REPTILE_SMALL_DEATH = 2636,
	SOUND_EFFECT_TYPE_SLIME_DEATH = 2637,
	SOUND_EFFECT_TYPE_UNDEAD_DEATH = 2638,
	SOUND_EFFECT_TYPE_VERMIN_CRITTER_DEATH = 2639,
	SOUND_EFFECT_TYPE_VERMIN_INSECT_DEATH = 2640,
	SOUND_EFFECT_TYPE_VERMIN_ROTWORM_DEATH = 2641,
	SOUND_EFFECT_TYPE_HUMAN_SAGE_DEATH = 2642,
	SOUND_EFFECT_TYPE_HUMAN_CRONE_DEATH = 2643,
	SOUND_EFFECT_TYPE_APE_DEATH = 2644,
	SOUND_EFFECT_TYPE_UNKNOWN_CREATURE_DEATH_1 = 2645,
	SOUND_EFFECT_TYPE_UNKNOWN_CREATURE_DEATH_2 = 2646,
	SOUND_EFFECT_TYPE_UNKNOWN_CREATURE_DEATH_3 = 2647,
	SOUND_EFFECT_TYPE_UNKNOWN_CREATURE_DEATH_4 = 2648,
	SOUND_EFFECT_TYPE_ACTION_HEAVY_METAL_LOUD = 2649,
	SOUND_EFFECT_TYPE_ENV_INSECTS_BIRDS = 2651,
	SOUND_EFFECT_TYPE_ENV_WIND_1 = 2652,
	SOUND_EFFECT_TYPE_ENV_WIND_CLOSE = 2653,
	SOUND_EFFECT_TYPE_ENV_WATER_DEPTH_BOAT_SURFACE = 2654,
	SOUND_EFFECT_TYPE_ENV_METALIC_SPACE = 2655,
	SOUND_EFFECT_TYPE_ENV_FROGS_INSECTS_WOODS = 2656,
	SOUND_EFFECT_TYPE_ENV_WATER_DEPTH = 2657,
	SOUND_EFFECT_TYPE_ENV_SEA_WAVE = 2658,
	SOUND_EFFECT_TYPE_ENV_WIND_2 = 2659,
	SOUND_EFFECT_TYPE_ENV_WIND_3 = 2660,
	SOUND_EFFECT_TYPE_ENV_MONKEYS = 2661,
	SOUND_EFFECT_TYPE_ENV_STORM_COMING = 2662,
	SOUND_EFFECT_TYPE_ACTION_HITTING_WOOD = 2663,
	SOUND_EFFECT_TYPE_ENV_WOOD_STICK_SMASH = 2664,
	SOUND_EFFECT_TYPE_ENV_THICK_BLOB_LIQUID_1 = 2665,
	SOUND_EFFECT_TYPE_ENV_LITTLE_BIRTS_FLOREST = 2666,
	SOUND_EFFECT_TYPE_ENV_THICK_BLOCK_LIQUID_CLOSE = 2667,
	SOUND_EFFECT_TYPE_ACTION_METAL_CHAINS_MOVING = 2668,
	SOUND_EFFECT_TYPE_ENV_CRICKET_1 = 2669,
	SOUND_EFFECT_TYPE_ENV_CRICKET_2 = 2670,
	SOUND_EFFECT_TYPE_ENV_CRICKET_3 = 2671,
	SOUND_EFFECT_TYPE_ENV_CICADA_1 = 2672,
	SOUND_EFFECT_TYPE_ENV_STONES_FALLING = 2673,
	SOUND_EFFECT_TYPE_ACTION_OPEN_DOOR = 2674,
	SOUND_EFFECT_TYPE_ACTION_CLOSE_DOOR = 2675,
	SOUND_EFFECT_TYPE_ENV_OWL = 2676,
	SOUND_EFFECT_TYPE_ENV_ELETRONIC_DEVICE = 2678,
	SOUND_EFFECT_TYPE_ENV_REPTILE_NOISE = 2679,
	SOUND_EFFECT_TYPE_ENV_FORGE_METAL_1 = 2680,
	SOUND_EFFECT_TYPE_ENV_FROG = 2681,
	SOUND_EFFECT_TYPE_ACTION_WOOD_OBJECT_USING = 2682,
	SOUND_EFFECT_TYPE_ACTION_METAL_OBJECT_HIT = 2683,
	SOUND_EFFECT_TYPE_ACTION_NAIL_HIT = 2684,
	SOUND_EFFECT_TYPE_ENV_BELL_RING = 2685,
	SOUND_EFFECT_TYPE_ENV_HOT_METAL_ON_WATER = 2686,
	SOUND_EFFECT_TYPE_ENV_WATER_SMOKE = 2687,
	SOUND_EFFECT_TYPE_ENV_WOLF_HOWL = 2688,
	SOUND_EFFECT_TYPE_ENV_WOOD_CRACKLE_CLOSE = 2689,
	SOUND_EFFECT_TYPE_ENV_LAUGHT = 2690,
	SOUND_EFFECT_TYPE_ENV_WIND_MOVING_LEAF = 2691,
	SOUND_EFFECT_TYPE_ENV_WIND_MOVING_FEW_LEAF = 2692,
	SOUND_EFFECT_TYPE_ACTION_PORTAL_CAST = 2693,
	SOUND_EFFECT_TYPE_ACTION_FIRE_MAGIC_CAST = 2694,
	SOUND_EFFECT_TYPE_ENV_TRAPDOOR_OPEN = 2695,
	SOUND_EFFECT_TYPE_ENV_NAIL_FALLING = 2696,
	SOUND_EFFECT_TYPE_ENV_LIGHT_BLOB_LIQUID = 2697,
	SOUND_EFFECT_TYPE_ENV_LION_ROAR = 2698,
	SOUND_EFFECT_TYPE_ENV_MOVING_OBJECT_BUTTON_TRIGGER = 2699,
	SOUND_EFFECT_TYPE_ENV_SNAKE_1 = 2700,
	SOUND_EFFECT_TYPE_ENV_HUMAN_SCREEN_1 = 2701,
	SOUND_EFFECT_TYPE_ENV_HUMAN_SCREEN_2 = 2702,
	SOUND_EFFECT_TYPE_ENV_SEAGUL_1 = 2703,
	SOUND_EFFECT_TYPE_ENV_FAST_FOOTSTEPS = 2704,
	SOUND_EFFECT_TYPE_ENV_SLOW_FOOTSTEPS = 2705,
	SOUND_EFFECT_TYPE_ENV_THICK_BLOB_LIQUID_2 = 2706,
	SOUND_EFFECT_TYPE_ENV_MOVING_LEAF = 2707,
	SOUND_EFFECT_TYPE_ENV_WOOD_CRACKLE_1 = 2708,
	SOUND_EFFECT_TYPE_ACTION_OBJECT_FALLING_DEPTH = 2709,
	SOUND_EFFECT_TYPE_ACTION_BUTTON_TRIGGER = 2710,
	SOUND_EFFECT_TYPE_ENV_HEAVEN_DARK_REVERB = 2711,
	SOUND_EFFECT_TYPE_ENV_WIND_4 = 2712,
	SOUND_EFFECT_TYPE_ENV_INSECT_1 = 2713,
	SOUND_EFFECT_TYPE_ENV_FLUTE_SONG = 2714,
	SOUND_EFFECT_TYPE_ENV_INSECTS_BIRDS_DEATH = 2715,
	SOUND_EFFECT_TYPE_ENV_INSECT_CREATURE_DEATH = 2716,
	SOUND_EFFECT_TYPE_ENV_LOW_ROAR = 2717,
	SOUND_EFFECT_TYPE_ENV_SINISTER_BURPH = 2718,
	SOUND_EFFECT_TYPE_ENV_CROWD_SCREEN = 2719,
	SOUND_EFFECT_TYPE_ENV_BIRDS_FLYING = 2720,
	SOUND_EFFECT_TYPE_ENV_CROWD_VOICES_1 = 2721,
	SOUND_EFFECT_TYPE_ENV_BIRD_CUCO = 2722,
	SOUND_EFFECT_TYPE_ENV_RAVINE = 2723,
	SOUND_EFFECT_TYPE_ENV_RAVINE_METALIC = 2724,
	SOUND_EFFECT_TYPE_ENV_STICKS_LEAF_STEP = 2725,
	SOUND_EFFECT_TYPE_ACTION_DISPEL_MAGIC_1 = 2726,
	SOUND_EFFECT_TYPE_ACTION_DISPEL_MAGIC_2 = 2727,
	SOUND_EFFECT_TYPE_ENV_CROWD_VOICES_2 = 2728,
	SOUND_EFFECT_TYPE_ENV_CROWD_VOICES_3 = 2729,
	SOUND_EFFECT_TYPE_ENV_CROWD_VOICES_4 = 2730,
	SOUND_EFFECT_TYPE_ACTION_METAL_OBJECT_FALL = 2731,
	SOUND_EFFECT_TYPE_ENV_HOURSE_STEPS = 2732,
	SOUND_EFFECT_TYPE_ENV_DRUMES_SINISTER_REVERB = 2733,
	SOUND_EFFECT_TYPE_ACTION_WOOD_PIECES_FALL = 2734,
	SOUND_EFFECT_TYPE_ACTION_KNIFE_CUT_FLESH = 2735,
	SOUND_EFFECT_TYPE_ENV_CROWD_VOICES_5 = 2736,
	SOUND_EFFECT_TYPE_ENV_CICADA_2 = 2738,
	SOUND_EFFECT_TYPE_ENV_FLYES = 2739,
	SOUND_EFFECT_TYPE_ENV_NOISE_WATER = 2740,
	SOUND_EFFECT_TYPE_ENV_PIG_SOUND_1 = 2741,
	SOUND_EFFECT_TYPE_ENV_PIG_SOUND_2 = 2742,
	SOUND_EFFECT_TYPE_ENV_SHEEP_SOUND_1 = 2743,
	SOUND_EFFECT_TYPE_ENV_SHEEP_SOUND_2 = 2744,
	SOUND_EFFECT_TYPE_ENV_FIRE = 2745,
	SOUND_EFFECT_TYPE_ENV_NOISE_SNOW = 2746,
	SOUND_EFFECT_TYPE_ENV_FIRE_PLACE = 2747,
	SOUND_EFFECT_TYPE_ENV_WATERFALL = 2748,
	SOUND_EFFECT_TYPE_ENV_WATER_SOURCE = 2749,
	SOUND_EFFECT_TYPE_ACTION_HAMMER_HITING_NAILS_1 = 2750,
	SOUND_EFFECT_TYPE_ACTION_HAMMER_HITING_NAILS_2 = 2751,
	SOUND_EFFECT_TYPE_ENV_QUICK_STEPS = 2752,
	SOUND_EFFECT_TYPE_ENV_HEAVY_OBJECT_FALL = 2753,
	SOUND_EFFECT_TYPE_ACTION_HITING_FORGE = 2754,
	SOUND_EFFECT_TYPE_ENV_WOOD_CRACKLE_2 = 2755,
	SOUND_EFFECT_TYPE_ACTION_WOOD_HIT = 2756,
	SOUND_EFFECT_TYPE_MUSIC_CUT_BIRDS = 2757,
	SOUND_EFFECT_TYPE_MUSIC_CUT_LITTLE_BIRDS = 2758,
	SOUND_EFFECT_TYPE_MUSIC_CUT_INSECTS_1 = 2759,
	SOUND_EFFECT_TYPE_MUSIC_CUT_INSECTS_2 = 2760,
	SOUND_EFFECT_TYPE_MUSIC_CUT_INSECTS_3 = 2761,
	SOUND_EFFECT_TYPE_MUSIC_CUT_FLUTE_WEST = 2762,
	SOUND_EFFECT_TYPE_MUSIC_CUT_CROWS_VOICES = 2763,
	SOUND_EFFECT_TYPE_MUSIC_CUT_WIND_WATER = 2764,
	SOUND_EFFECT_TYPE_MUSIC_CUT_THICK_BLOCK_DEPTH = 2765,
	SOUND_EFFECT_TYPE_ENV_CAMEL = 2766,
	SOUND_EFFECT_TYPE_UNKNOWN_CREATURE_DEATH_5 = 2767,
	SOUND_EFFECT_TYPE_ENV_CHICKEN_1 = 2768,
	SOUND_EFFECT_TYPE_ENV_CHICKEN_2 = 2769,
	SOUND_EFFECT_TYPE_ENV_THRILLER_METALLIC = 2770,
	SOUND_EFFECT_TYPE_ACTION_NOTIFICATION = 2771,
	SOUND_EFFECT_TYPE_ACTION_LEVEL_ACHIEVEMENT = 2772,
	SOUND_EFFECT_TYPE_ACTION_SCREENSHOT = 2773,
	SOUND_EFFECT_TYPE_ACTION_CLICK_ON = 2774,
	SOUND_EFFECT_TYPE_ACTION_CLICK_OFF = 2775,
	SOUND_EFFECT_TYPE_ACTION_DRUMS = 2776,
	SOUND_EFFECT_TYPE_ACTION_XYLOPHONE_SLOW_DRUM = 2777,
	SOUND_EFFECT_TYPE_ACTION_HARP_1 = 2778,
	SOUND_EFFECT_TYPE_ACTION_HARP_2 = 2779,
	SOUND_EFFECT_TYPE_ACTION_MOVING_WOOD = 2780,
	SOUND_EFFECT_TYPE_ACTION_CRATE_BREAK_MAGIC_DUST = 2781,
	SOUND_EFFECT_TYPE_ACTION_BELL_RING = 2783,
	SOUND_EFFECT_TYPE_ACTION_SELECT_OBJECT = 2785,
	SOUND_EFFECT_TYPE_ITEM_MOVE_BACKPACK = 2786,
	SOUND_EFFECT_TYPE_ITEM_USE_POTION = 2787,
	SOUND_EFFECT_TYPE_ITEM_MOVE_NECKLACES = 2788,
	SOUND_EFFECT_TYPE_ITEM_MOVE_ARMORS = 2789,
	SOUND_EFFECT_TYPE_ITEM_MOVE_METALIC = 2790,
	SOUND_EFFECT_TYPE_ITEM_MOVE_DISTANCE = 2791,
	SOUND_EFFECT_TYPE_ITEM_MOVE_WOOD = 2792,
	SOUND_EFFECT_TYPE_ITEM_MOVE_STACKABLE = 2793,
	SOUND_EFFECT_TYPE_ITEM_MOVE_DEFAULT = 2794,
	SOUND_EFFECT_TYPE_ITEM_MOVE_LEGS = 2795,
	SOUND_EFFECT_TYPE_ITEM_MOVE_HELMETS = 2796,
	SOUND_EFFECT_TYPE_ITEM_MOVE_QUIVERS = 2797,
	SOUND_EFFECT_TYPE_ITEM_MOVE_RINGS = 2798,
	SOUND_EFFECT_TYPE_ENV_FROG_OR_LIQUID = 2799,
	SOUND_EFFECT_TYPE_ACTION_WOOD_OBJECT_HIT_STORE = 2800,
	SOUND_EFFECT_TYPE_ITEM_MOVE_BOOTS = 2801,
	SOUND_EFFECT_TYPE_ACTION_SWORD_DRAWN = 2802,
	SOUND_EFFECT_TYPE_ACTION_EAT = 2803,
	SOUND_EFFECT_TYPE_ACTION_STORE_BIG_OBJECT = 2804,
	SOUND_EFFECT_TYPE_ACTION_STORE_WOOD_OBJECT = 2805,
	SOUND_EFFECT_TYPE_ACTION_VIP_LOGOUT = 2806,
	SOUND_EFFECT_TYPE_ACTION_VIP_LOGIN = 2807,
	SOUND_EFFECT_TYPE_ENV_CAT_1 = 2808,
	SOUND_EFFECT_TYPE_ENV_INSECT_2 = 2809,
	SOUND_EFFECT_TYPE_ENV_SEAGUL_2 = 2810,
	SOUND_EFFECT_TYPE_ENV_LIQUID_SPILL = 2811,
	SOUND_EFFECT_TYPE_ENV_COW_MOO_1 = 2813,
	SOUND_EFFECT_TYPE_ENV_COW_MOO_2 = 2814,
	SOUND_EFFECT_TYPE_ENV_CAT_2 = 2815,
	SOUND_EFFECT_TYPE_ACTION_REAWRD_FEY = 2816,
	SOUND_EFFECT_TYPE_ACTION_REWARD_GUITAR_1 = 2817,
	SOUND_EFFECT_TYPE_ACTION_REWARD_GUITAR_2 = 2818,
	SOUND_EFFECT_TYPE_ENV_WOODS_WATER_SOURCE = 2819,
	SOUND_EFFECT_TYPE_ENV_HYENA = 2820,
	SOUND_EFFECT_TYPE_UNKNOWN_CREATURE_DEATH_6 = 2821,
	SOUND_EFFECT_TYPE_ENV_COW_MOO_3 = 2822,
	SOUND_EFFECT_TYPE_UNKNOWN_CREATURE_DEATH_7 = 2823,
	SOUND_EFFECT_TYPE_ENV_METALIC_SPACE_ALIEN = 2824,
	SOUND_EFFECT_TYPE_ACTION_AIR_STRIKE = 2825,
	SOUND_EFFECT_TYPE_ENV_WATER = 2828,
	SOUND_EFFECT_TYPE_ENV_SNAKE_2 = 2829,
	SOUND_EFFECT_TYPE_GOD_SPELL_KILL_ALL_MONSTERS = 10001, // No sound ingame
};

enum WheelOfDestinyStage_t : uint8_t {
	WHEEL_OF_DESTINY_STAGE_GIFT_OF_LIFE = 0,
	WHEEL_OF_DESTINY_STAGE_COMBAT_MASTERY = 1,
	WHEEL_OF_DESTINY_STAGE_BLESSING_OF_THE_GROVE = 2,
	WHEEL_OF_DESTINY_STAGE_DRAIN_BODY = 3,
	WHEEL_OF_DESTINY_STAGE_BEAM_MASTERY = 4,
	WHEEL_OF_DESTINY_STAGE_DIVINE_EMPOWERMENT = 5,
	WHEEL_OF_DESTINY_STAGE_TWIN_BURST = 6,
	WHEEL_OF_DESTINY_STAGE_EXECUTIONERS_THROW = 7,
	WHEEL_OF_DESTINY_STAGE_AVATAR_OF_LIGHT = 8,
	WHEEL_OF_DESTINY_STAGE_AVATAR_OF_NATURE = 9,
	WHEEL_OF_DESTINY_STAGE_AVATAR_OF_STEEL = 10,
	WHEEL_OF_DESTINY_STAGE_AVATAR_OF_STORM = 11,

	WHEEL_OF_DESTINY_STAGE_COUNT = 12
};

enum WheelOfDestinyOnThink_t : uint8_t {
	WHEEL_OF_DESTINY_ONTHINK_BATTLE_INSTINCT = 0,
	WHEEL_OF_DESTINY_ONTHINK_POSITIONAL_TATICS = 1,
	WHEEL_OF_DESTINY_ONTHINK_BALLISTIC_MASTERY = 2,
	WHEEL_OF_DESTINY_ONTHINK_COMBAT_MASTERY = 3,
	WHEEL_OF_DESTINY_ONTHINK_FOCUS_MASTERY = 4,
	WHEEL_OF_DESTINY_ONTHINK_GIFT_OF_LIFE = 5,
	WHEEL_OF_DESTINY_ONTHINK_DIVINE_EMPOWERMENT = 6,
	WHEEL_OF_DESTINY_ONTHINK_AVATAR = 7,

	WHEEL_OF_DESTINY_ONTHINK_COUNT = 8
};

enum WheelOfDestinyStat_t : uint8_t {
	WHEEL_OF_DESTINY_STAT_HEALTH = 0,
	WHEEL_OF_DESTINY_STAT_MANA = 1,
	WHEEL_OF_DESTINY_STAT_CAPACITY = 2,
	WHEEL_OF_DESTINY_STAT_MITIGATION = 3,
	WHEEL_OF_DESTINY_STAT_MELEE = 4,
	WHEEL_OF_DESTINY_STAT_DISTANCE = 5,
	WHEEL_OF_DESTINY_STAT_MAGIC = 6,
	WHEEL_OF_DESTINY_STAT_LIFE_LEECH = 7,
	WHEEL_OF_DESTINY_STAT_MANA_LEECH = 8,
	WHEEL_OF_DESTINY_STAT_HEALING = 9,
	WHEEL_OF_DESTINY_STAT_DAMAGE = 10,
	WHEEL_OF_DESTINY_STAT_LIFE_LEECH_CHANCE = 11,
	WHEEL_OF_DESTINY_STAT_MANA_LEECH_CHANCE = 12,

	WHEEL_OF_DESTINY_STAT_COUNT = 13
};

enum WheelOfDestinyMajor_t : uint8_t {
	WHEEL_OF_DESTINY_MAJOR_MELEE = 0,
	WHEEL_OF_DESTINY_MAJOR_DISTANCE = 1,
	WHEEL_OF_DESTINY_MAJOR_SHIELD = 2,
	WHEEL_OF_DESTINY_MAJOR_MAGIC = 3,
	WHEEL_OF_DESTINY_MAJOR_HOLY_RESISTANCE = 4,
	WHEEL_OF_DESTINY_MAJOR_CRITICAL_DMG = 5,
	WHEEL_OF_DESTINY_MAJOR_PHYSICAL_DMG = 6,
	WHEEL_OF_DESTINY_MAJOR_HOLY_DMG = 7,
	WHEEL_OF_DESTINY_MAJOR_CRITICAL_DMG_2 = 8,
	WHEEL_OF_DESTINY_MAJOR_DEFENSE = 9,
	WHEEL_OF_DESTINY_MAJOR_DAMAGE = 10,

	WHEEL_OF_DESTINY_MAJOR_COUNT = 11
};

enum WheelOfDestinyInstant_t : uint8_t {
	WHEEL_OF_DESTINY_INSTANT_BATTLE_INSTINCT = 0,
	WHEEL_OF_DESTINY_INSTANT_BATTLE_HEALING = 1,
	WHEEL_OF_DESTINY_INSTANT_POSITIONAL_TATICS = 2,
	WHEEL_OF_DESTINY_INSTANT_BALLISTIC_MASTERY = 3,
	WHEEL_OF_DESTINY_INSTANT_HEALING_LINK = 4,
	WHEEL_OF_DESTINY_INSTANT_RUNIC_MASTERY = 5,
	WHEEL_OF_DESTINY_INSTANT_FOCUS_MASTERY = 6,

	WHEEL_OF_DESTINY_INSTANT_COUNT = 7
};

enum WheelOfDestinyAvatarSkill_t : uint8_t {
	WHEEL_OF_DESTINY_AVATAR_SKILL_NONE = 0,
	WHEEL_OF_DESTINY_AVATAR_SKILL_DAMAGE_REDUCTION = 1,
	WHEEL_OF_DESTINY_AVATAR_SKILL_CRITICAL_CHANCE = 2,
	WHEEL_OF_DESTINY_AVATAR_SKILL_CRITICAL_DAMAGE = 3
};

enum WheelOfDestinySpellGrade_t : uint8_t {
	WHEEL_OF_DESTINY_SPELL_GRADE_NONE = 0,
	WHEEL_OF_DESTINY_SPELL_GRADE_REGULAR = 1,
	WHEEL_OF_DESTINY_SPELL_GRADE_UPGRADED = 2,
	WHEEL_OF_DESTINY_SPELL_GRADE_MAX = 3 // This one is used only on LUA
};

enum WheelOfDestinySpellBoost_t : uint8_t {
	WHEEL_OF_DESTINY_SPELL_BOOST_MANA = 0,
	WHEEL_OF_DESTINY_SPELL_BOOST_COOLDOWN = 1,
	WHEEL_OF_DESTINY_SPELL_BOOST_GROUP_COOLDOWN = 2,
	WHEEL_OF_DESTINY_SPELL_BOOST_SECONDARY_GROUP_COOLDOWN = 3,
	WHEEL_OF_DESTINY_SPELL_BOOST_MANA_LEECH = 4,
	WHEEL_OF_DESTINY_SPELL_BOOST_LIFE_LEECH = 5,
	WHEEL_OF_DESTINY_SPELL_BOOST_DAMAGE = 6,
	WHEEL_OF_DESTINY_SPELL_BOOST_DAMAGE_REDUCTION = 7,
	WHEEL_OF_DESTINY_SPELL_BOOST_HEAL = 8,
	WHEEL_OF_DESTINY_SPELL_BOOST_CRITICAL_DAMAGE = 9,
	WHEEL_OF_DESTINY_SPELL_BOOST_CRITICAL_CHANCE = 10,

	WHEEL_OF_DESTINY_SPELL_BOOST_COUNT = 11
};

enum SourceEffect_t : uint8_t {
	SOUND_SOURCE_TYPE_GLOBAL = 0,
	SOUND_SOURCE_TYPE_OWN = 1,
	SOUND_SOURCE_TYPE_OTHERS = 2,
	SOUND_SOURCE_TYPE_CREATURES = 3,
};

enum CallBackParam_t {
	CALLBACK_PARAM_LEVELMAGICVALUE,
	CALLBACK_PARAM_SKILLVALUE,
	CALLBACK_PARAM_TARGETTILE,
	CALLBACK_PARAM_TARGETCREATURE,
};

enum ConditionParam_t {
	CONDITION_PARAM_OWNER = 1,
	CONDITION_PARAM_TICKS = 2,
	//CONDITION_PARAM_OUTFIT = 3,
	CONDITION_PARAM_HEALTHGAIN = 4,
	CONDITION_PARAM_HEALTHTICKS = 5,
	CONDITION_PARAM_MANAGAIN = 6,
	CONDITION_PARAM_MANATICKS = 7,
	CONDITION_PARAM_DELAYED = 8,
	CONDITION_PARAM_SPEED = 9,
	CONDITION_PARAM_LIGHT_LEVEL = 10,
	CONDITION_PARAM_LIGHT_COLOR = 11,
	CONDITION_PARAM_SOULGAIN = 12,
	CONDITION_PARAM_SOULTICKS = 13,
	CONDITION_PARAM_MINVALUE = 14,
	CONDITION_PARAM_MAXVALUE = 15,
	CONDITION_PARAM_STARTVALUE = 16,
	CONDITION_PARAM_TICKINTERVAL = 17,
	CONDITION_PARAM_FORCEUPDATE = 18,
	CONDITION_PARAM_SKILL_MELEE = 19,
	CONDITION_PARAM_SKILL_FIST = 20,
	CONDITION_PARAM_SKILL_CLUB = 21,
	CONDITION_PARAM_SKILL_SWORD = 22,
	CONDITION_PARAM_SKILL_AXE = 23,
	CONDITION_PARAM_SKILL_DISTANCE = 24,
	CONDITION_PARAM_SKILL_SHIELD = 25,
	CONDITION_PARAM_SKILL_FISHING = 26,
	CONDITION_PARAM_STAT_MAXHITPOINTS = 27,
	CONDITION_PARAM_STAT_MAXMANAPOINTS = 28,
	// CONDITION_PARAM_STAT_SOULPOINTS = 29,
	CONDITION_PARAM_STAT_MAGICPOINTS = 30,
	CONDITION_PARAM_STAT_MAXHITPOINTSPERCENT = 31,
	CONDITION_PARAM_STAT_MAXMANAPOINTSPERCENT = 32,
	// CONDITION_PARAM_STAT_SOULPOINTSPERCENT = 33,
	CONDITION_PARAM_STAT_MAGICPOINTSPERCENT = 34,
	CONDITION_PARAM_PERIODICDAMAGE = 35,
	CONDITION_PARAM_SKILL_MELEEPERCENT = 36,
	CONDITION_PARAM_SKILL_FISTPERCENT = 37,
	CONDITION_PARAM_SKILL_CLUBPERCENT = 38,
	CONDITION_PARAM_SKILL_SWORDPERCENT = 39,
	CONDITION_PARAM_SKILL_AXEPERCENT = 40,
	CONDITION_PARAM_SKILL_DISTANCEPERCENT = 41,
	CONDITION_PARAM_SKILL_SHIELDPERCENT = 42,
	CONDITION_PARAM_SKILL_FISHINGPERCENT = 43,
	CONDITION_PARAM_BUFF_SPELL = 44,
	CONDITION_PARAM_SUBID = 45,
	CONDITION_PARAM_FIELD = 46,
	CONDITION_PARAM_SKILL_CRITICAL_HIT_CHANCE = 47,
	CONDITION_PARAM_SKILL_CRITICAL_HIT_DAMAGE = 48,
	CONDITION_PARAM_SKILL_LIFE_LEECH_CHANCE = 49,
	CONDITION_PARAM_SKILL_LIFE_LEECH_AMOUNT = 50,
	CONDITION_PARAM_SKILL_MANA_LEECH_CHANCE = 51,
	CONDITION_PARAM_SKILL_MANA_LEECH_AMOUNT = 52,
	CONDITION_PARAM_DISABLE_DEFENSE = 53,
	CONDITION_PARAM_STAT_CAPACITYPERCENT = 54,
  CONDITION_PARAM_MANASHIELD = 55,
  CONDITION_PARAM_BUFF_DAMAGEDEALT = 56,
  CONDITION_PARAM_BUFF_DAMAGERECEIVED = 57,
	CONDITION_PARAM_BUFF_INFLUENCED_DAMAGEDEALT = 58,
	CONDITION_PARAM_BUFF_INFLUENCED_DAMAGERECEVIED = 59,
	CONDITION_PARAM_SOUND_TICK = 60,
	CONDITION_PARAM_SOUND_ADD = 61,
};

enum BlockType_t : uint8_t {
	BLOCK_NONE,
	BLOCK_DEFENSE,
	BLOCK_ARMOR,
	BLOCK_IMMUNITY
};

enum skills_t : uint8_t {
	SKILL_FIST = 0,
	SKILL_CLUB = 1,
	SKILL_SWORD = 2,
	SKILL_AXE = 3,
	SKILL_DISTANCE = 4,
	SKILL_SHIELD = 5,
	SKILL_FISHING = 6,
	SKILL_CRITICAL_HIT_CHANCE = 7,
	SKILL_CRITICAL_HIT_DAMAGE = 8,
	SKILL_LIFE_LEECH_CHANCE = 9,
	SKILL_LIFE_LEECH_AMOUNT = 10,
	SKILL_MANA_LEECH_CHANCE = 11,
	SKILL_MANA_LEECH_AMOUNT = 12,

	SKILL_MAGLEVEL = 13,
	SKILL_LEVEL = 14,

	SKILL_FIRST = SKILL_FIST,
	SKILL_LAST = SKILL_MANA_LEECH_AMOUNT
};

enum stats_t {
	STAT_MAXHITPOINTS,
	STAT_MAXMANAPOINTS,
	STAT_SOULPOINTS, // unused
	STAT_MAGICPOINTS,
	STAT_CAPACITY,

	STAT_FIRST = STAT_MAXHITPOINTS,
	STAT_LAST = STAT_CAPACITY
};

enum specials_t {
	SPECIAL_ONSLAUGHT,
	SPECIAL_RUSE,
	SPECIAL_MOMENTUM,

	SPECIAL_FIRST = SPECIAL_ONSLAUGHT,
	SPECIAL_LAST = SPECIAL_MOMENTUM
};

enum buffs_t {
  BUFF_DAMAGEDEALT,
  BUFF_DAMAGERECEIVED,
	BUFF_INFLUENCED_DAMAGEDEALT,
	BUFF_INFLUENCED_DAMAGERECEVIED,

  BUFF_FIRST = BUFF_DAMAGEDEALT,
  BUFF_LAST = BUFF_INFLUENCED_DAMAGERECEVIED,
};

enum formulaType_t {
	COMBAT_FORMULA_UNDEFINED,
	COMBAT_FORMULA_LEVELMAGIC,
	COMBAT_FORMULA_SKILL,
	COMBAT_FORMULA_DAMAGE,
};

enum ConditionType_t {
	CONDITION_NONE,

	CONDITION_POISON = 1 << 0,
	CONDITION_FIRE = 1 << 1,
	CONDITION_ENERGY = 1 << 2,
	CONDITION_BLEEDING = 1 << 3,
	CONDITION_HASTE = 1 << 4,
	CONDITION_PARALYZE = 1 << 5,
	CONDITION_OUTFIT = 1 << 6,
	CONDITION_INVISIBLE = 1 << 7,
	CONDITION_LIGHT = 1 << 8,
	CONDITION_MANASHIELD = 1 << 9,
	CONDITION_INFIGHT = 1 << 10,
	CONDITION_DRUNK = 1 << 11,
	CONDITION_EXHAUST = 1 << 12, // unused
	CONDITION_REGENERATION = 1 << 13,
	CONDITION_SOUL = 1 << 14,
	CONDITION_DROWN = 1 << 15,
	CONDITION_MUTED = 1 << 16,
	CONDITION_CHANNELMUTEDTICKS = 1 << 17,
	CONDITION_YELLTICKS = 1 << 18,
	CONDITION_ATTRIBUTES = 1 << 19,
	CONDITION_FREEZING = 1 << 20,
	CONDITION_DAZZLED = 1 << 21,
	CONDITION_CURSED = 1 << 22,
	CONDITION_EXHAUST_COMBAT = 1 << 23, // unused
	CONDITION_EXHAUST_HEAL = 1 << 24, // unused
	CONDITION_PACIFIED = 1 << 25,
	CONDITION_SPELLCOOLDOWN = 1 << 26,
	CONDITION_SPELLGROUPCOOLDOWN = 1 << 27,
	CONDITION_ROOTED = 1 << 28,
	CONDITION_SPECIALPOTION_COOLDOWN = 1 << 29,
	CONDITION_SPECIALPOTIONEFFECT_COOLDOWN = 1 << 30,
	CONDITION_SPECIALPOTION_EFFECT = 1 << 31
};

enum ConditionId_t : int8_t {
	CONDITIONID_DEFAULT = -1,
	CONDITIONID_COMBAT,
	CONDITIONID_HEAD,
	CONDITIONID_NECKLACE,
	CONDITIONID_BACKPACK,
	CONDITIONID_ARMOR,
	CONDITIONID_RIGHT,
	CONDITIONID_LEFT,
	CONDITIONID_LEGS,
	CONDITIONID_FEET,
	CONDITIONID_RING,
	CONDITIONID_AMMO,
};

enum SpecialPotion_t : uint8_t {
	POTION_AID = 1,
	POTION_CRITICAL = 2,
	POTION_STAMINA = 3,
	POTION_CHARM = 4,
	POTION_LOOT = 5,
	POTION_BESTIARY = 6,
	POTION_PROTECTION = 7,
	POTION_DAMAGE = 8
};

enum PlayerSex_t : uint8_t {
	PLAYERSEX_FEMALE = 0,
	PLAYERSEX_MALE = 1,

	PLAYERSEX_LAST = PLAYERSEX_MALE
};

enum Vocation_t : uint16_t {
	VOCATION_NONE = 0,
	VOCATION_SORCERER = 1,
	VOCATION_DRUID = 2,
	VOCATION_PALADIN = 3,
	VOCATION_KNIGHT = 4,
	VOCATION_MASTER_SORCERER = 5,
	VOCATION_ELDER_DRUID = 6,
	VOCATION_ROYAL_PALADIN = 7,
	VOCATION_ELITE_KNIGHT = 8,
	VOCATION_LAST = VOCATION_ELITE_KNIGHT
};

enum ReturnValue {
	RETURNVALUE_NOERROR,
	RETURNVALUE_NOTPOSSIBLE,
	RETURNVALUE_NOTENOUGHROOM,
	RETURNVALUE_PLAYERISPZLOCKED,
	RETURNVALUE_PLAYERISNOTINVITED,
	RETURNVALUE_CANNOTTHROW,
	RETURNVALUE_THEREISNOWAY,
	RETURNVALUE_DESTINATIONOUTOFREACH,
	RETURNVALUE_CREATUREBLOCK,
	RETURNVALUE_NOTMOVEABLE,
	RETURNVALUE_DROPTWOHANDEDITEM,
	RETURNVALUE_BOTHHANDSNEEDTOBEFREE,
	RETURNVALUE_CANONLYUSEONEWEAPON,
	RETURNVALUE_NEEDEXCHANGE,
	RETURNVALUE_CANNOTBEDRESSED,
	RETURNVALUE_PUTTHISOBJECTINYOURHAND,
	RETURNVALUE_PUTTHISOBJECTINBOTHHANDS,
	RETURNVALUE_TOOFARAWAY,
	RETURNVALUE_FIRSTGODOWNSTAIRS,
	RETURNVALUE_FIRSTGOUPSTAIRS,
	RETURNVALUE_CONTAINERNOTENOUGHROOM,
  RETURNVALUE_ONLYAMMOINQUIVER,
	RETURNVALUE_NOTENOUGHCAPACITY,
	RETURNVALUE_CANNOTPICKUP,
	RETURNVALUE_THISISIMPOSSIBLE,
	RETURNVALUE_DEPOTISFULL,
	RETURNVALUE_CREATUREDOESNOTEXIST,
	RETURNVALUE_CANNOTUSETHISOBJECT,
	RETURNVALUE_PLAYERWITHTHISNAMEISNOTONLINE,
	RETURNVALUE_NOTREQUIREDLEVELTOUSERUNE,
	RETURNVALUE_YOUAREALREADYTRADING,
	RETURNVALUE_THISPLAYERISALREADYTRADING,
	RETURNVALUE_YOUMAYNOTLOGOUTDURINGAFIGHT,
	RETURNVALUE_DIRECTPLAYERSHOOT,
	RETURNVALUE_NOTENOUGHLEVEL,
	RETURNVALUE_NOTENOUGHMAGICLEVEL,
	RETURNVALUE_NOTENOUGHMANA,
	RETURNVALUE_NOTENOUGHSOUL,
	RETURNVALUE_YOUAREEXHAUSTED,
	RETURNVALUE_YOUCANNOTUSEOBJECTSTHATFAST,
	RETURNVALUE_PLAYERISNOTREACHABLE,
	RETURNVALUE_CANONLYUSETHISRUNEONCREATURES,
	RETURNVALUE_ACTIONNOTPERMITTEDINPROTECTIONZONE,
	RETURNVALUE_YOUMAYNOTATTACKTHISPLAYER,
	RETURNVALUE_YOUMAYNOTATTACKAPERSONINPROTECTIONZONE,
	RETURNVALUE_YOUMAYNOTATTACKAPERSONWHILEINPROTECTIONZONE,
	RETURNVALUE_YOUMAYNOTATTACKTHISCREATURE,
	RETURNVALUE_YOUCANONLYUSEITONCREATURES,
	RETURNVALUE_CREATUREISNOTREACHABLE,
	RETURNVALUE_TURNSECUREMODETOATTACKUNMARKEDPLAYERS,
	RETURNVALUE_YOUNEEDPREMIUMACCOUNT,
	RETURNVALUE_YOUNEEDTOLEARNTHISSPELL,
	RETURNVALUE_YOURVOCATIONCANNOTUSETHISSPELL,
	RETURNVALUE_YOUNEEDAWEAPONTOUSETHISSPELL,
	RETURNVALUE_PLAYERISPZLOCKEDLEAVEPVPZONE,
	RETURNVALUE_PLAYERISPZLOCKEDENTERPVPZONE,
	RETURNVALUE_ACTIONNOTPERMITTEDINANOPVPZONE,
	RETURNVALUE_YOUCANNOTLOGOUTHERE,
	RETURNVALUE_YOUNEEDAMAGICITEMTOCASTSPELL,
	RETURNVALUE_CANNOTCONJUREITEMHERE,
	RETURNVALUE_YOUNEEDTOSPLITYOURSPEARS,
	RETURNVALUE_NAMEISTOOAMBIGUOUS,
	RETURNVALUE_CANONLYUSEONESHIELD,
	RETURNVALUE_NOPARTYMEMBERSINRANGE,
	RETURNVALUE_YOUARENOTTHEOWNER,
	RETURNVALUE_YOUCANTOPENCORPSEADM,
	RETURNVALUE_NOSUCHRAIDEXISTS,
	RETURNVALUE_ANOTHERRAIDISALREADYEXECUTING,
	RETURNVALUE_TRADEPLAYERFARAWAY,
	RETURNVALUE_YOUDONTOWNTHISHOUSE,
	RETURNVALUE_TRADEPLAYERALREADYOWNSAHOUSE,
	RETURNVALUE_TRADEPLAYERHIGHESTBIDDER,
	RETURNVALUE_YOUCANNOTTRADETHISHOUSE,
	RETURNVALUE_YOUDONTHAVEREQUIREDPROFESSION,
	RETURNVALUE_NOTENOUGHFISTLEVEL,
	RETURNVALUE_NOTENOUGHCLUBLEVEL,
	RETURNVALUE_NOTENOUGHSWORDLEVEL,
	RETURNVALUE_NOTENOUGHAXELEVEL,
	RETURNVALUE_NOTENOUGHDISTANCELEVEL,
	RETURNVALUE_NOTENOUGHSHIELDLEVEL,
	RETURNVALUE_NOTENOUGHFISHLEVEL,
	RETURNVALUE_REWARDCHESTISEMPTY,
};

enum SpeechBubble_t
{
	SPEECHBUBBLE_NONE = 0,
	SPEECHBUBBLE_NORMAL = 1,
	SPEECHBUBBLE_TRADE = 2,
	SPEECHBUBBLE_QUEST = 3,
	SPEECHBUBBLE_QUESTTRADER = 4,
};

enum RespawnPeriod_t {
	RESPAWNPERIOD_ALL,
	RESPAWNPERIOD_DAY,
	RESPAWNPERIOD_NIGHT
};

/**
 * @Deprecated
 * It will be dropped with monsters. Use RespawnPeriod_t instead.
 */
enum SpawnType_t
{
	RESPAWN_IN_ALL = 0,
	RESPAWN_IN_DAY = 1,
	RESPAWN_IN_NIGHT = 2,
	RESPAWN_IN_DAY_CAVE = 3,
	RESPAWN_IN_NIGHT_CAVE = 4,
};

enum MapMark_t
{
	MAPMARK_TICK = 0,
	MAPMARK_QUESTION = 1,
	MAPMARK_EXCLAMATION = 2,
	MAPMARK_STAR = 3,
	MAPMARK_CROSS = 4,
	MAPMARK_TEMPLE = 5,
	MAPMARK_KISS = 6,
	MAPMARK_SHOVEL = 7,
	MAPMARK_SWORD = 8,
	MAPMARK_FLAG = 9,
	MAPMARK_LOCK = 10,
	MAPMARK_BAG = 11,
	MAPMARK_SKULL = 12,
	MAPMARK_DOLLAR = 13,
	MAPMARK_REDNORTH = 14,
	MAPMARK_REDSOUTH = 15,
	MAPMARK_REDEAST = 16,
	MAPMARK_REDWEST = 17,
	MAPMARK_GREENNORTH = 18,
	MAPMARK_GREENSOUTH = 19,
};

enum QuickLootFilter_t
{
	QUICKLOOTFILTER_SKIPPEDLOOT = 0,
	QUICKLOOTFILTER_ACCEPTEDLOOT = 1,
};

enum ObjectCategory_t
{
	OBJECTCATEGORY_NONE = 0,
	OBJECTCATEGORY_ARMORS = 1,
	OBJECTCATEGORY_NECKLACES = 2,
	OBJECTCATEGORY_BOOTS = 3,
	OBJECTCATEGORY_CONTAINERS = 4,
	OBJECTCATEGORY_DECORATION = 5,
	OBJECTCATEGORY_FOOD = 6,
	OBJECTCATEGORY_HELMETS = 7,
	OBJECTCATEGORY_LEGS = 8,
	OBJECTCATEGORY_OTHERS = 9,
	OBJECTCATEGORY_POTIONS = 10,
	OBJECTCATEGORY_RINGS = 11,
	OBJECTCATEGORY_RUNES = 12,
	OBJECTCATEGORY_SHIELDS = 13,
	OBJECTCATEGORY_TOOLS = 14,
	OBJECTCATEGORY_VALUABLES = 15,
	OBJECTCATEGORY_AMMO = 16,
	OBJECTCATEGORY_AXES = 17,
	OBJECTCATEGORY_CLUBS = 18,
	OBJECTCATEGORY_DISTANCEWEAPONS = 19,
	OBJECTCATEGORY_SWORDS = 20,
	OBJECTCATEGORY_WANDS = 21,
	OBJECTCATEGORY_PREMIUMSCROLLS = 22, // not used in quickloot
	OBJECTCATEGORY_TIBIACOINS = 23, // not used in quickloot
	OBJECTCATEGORY_CREATUREPRODUCTS = 24,
	OBJECTCATEGORY_STASHRETRIEVE = 27,
	OBJECTCATEGORY_GOLD = 30,
	OBJECTCATEGORY_DEFAULT = 31, // unassigned loot

	OBJECTCATEGORY_FIRST = OBJECTCATEGORY_ARMORS,
	OBJECTCATEGORY_LAST = OBJECTCATEGORY_DEFAULT,
};

struct Outfit_t {
	uint16_t lookType = 0;
	uint16_t lookTypeEx = 0;
	uint16_t lookMount = 0;
	uint8_t lookHead = 0;
	uint8_t lookBody = 0;
	uint8_t lookLegs = 0;
	uint8_t lookFeet = 0;
	uint8_t lookAddons = 0;
	uint8_t lookMountHead = 0;
	uint8_t lookMountBody = 0;
	uint8_t lookMountLegs = 0;
	uint8_t lookMountFeet = 0;
	uint16_t lookFamiliarsType = 0;
};

enum Faction_t {
	FACTION_DEFAULT = 0,
	FACTION_PLAYER = 1,
	FACTION_LION = 2,
	FACTION_LIONUSURPERS = 3,
	FACTION_LAST = FACTION_LIONUSURPERS,
};

enum LightState_t {
	LIGHT_STATE_DAY,
	LIGHT_STATE_NIGHT,
	LIGHT_STATE_SUNSET,
	LIGHT_STATE_SUNRISE,
};

struct LightInfo {
	uint8_t level = 0;
	uint8_t color = 0;
	constexpr LightInfo() = default;
	constexpr LightInfo(uint8_t newLevel, uint8_t newColor) : level(newLevel), color(newColor) {}
};

struct RespawnType {
	RespawnPeriod_t period;
	bool underground;
};

struct ShopInfo {
	uint16_t itemId;
	int32_t subType;
	uint32_t buyPrice;
	uint32_t sellPrice;
	std::string realName;

	ShopInfo() {
		itemId = 0;
		subType = 1;
		buyPrice = 0;
		sellPrice = 0;
	}

	ShopInfo(uint16_t newItemId, int32_t newSubType = 0, uint32_t newBuyPrice = 0, uint32_t newSellPrice = 0, std::string newRealName = "")
		: itemId(newItemId), subType(newSubType), buyPrice(newBuyPrice), sellPrice(newSellPrice), realName(std::move(newRealName)) {}
};

struct MarketOffer {
	MarketOffer() = default;
	MarketOffer(uint32_t price, uint32_t timestamp, uint16_t amount, uint16_t counter, uint16_t itemId, uint16_t tier, std::string playerName) :
		price(price), timestamp(timestamp), amount(amount), counter(counter), itemId(itemId), tier(tier), playerName(std::move(playerName)) {}

	// copyable
	MarketOffer(const MarketOffer& rhs) :
		price(rhs.price), timestamp(rhs.timestamp), amount(rhs.amount), counter(rhs.counter), itemId(rhs.itemId), tier(rhs.tier), playerName(rhs.playerName) {}
	MarketOffer& operator=(const MarketOffer& rhs) {
		if (this != &rhs) {
			price = rhs.price;
			timestamp = rhs.timestamp;
			amount = rhs.amount;
			counter = rhs.counter;
			itemId = rhs.itemId;
			tier = rhs.tier;
			playerName = rhs.playerName;
		}
		return *this;
	}

	// moveable
	MarketOffer(MarketOffer&& rhs) noexcept :
		price(rhs.price), timestamp(rhs.timestamp), amount(rhs.amount), counter(rhs.counter), itemId(rhs.itemId), tier(rhs.tier), playerName(std::move(rhs.playerName)) {}
	MarketOffer& operator=(MarketOffer&& rhs) noexcept {
		if (this != &rhs) {
			price = rhs.price;
			timestamp = rhs.timestamp;
			amount = rhs.amount;
			counter = rhs.counter;
			itemId = rhs.itemId;
			tier = rhs.tier;
			playerName = std::move(rhs.playerName);
		}
		return *this;
	}

	uint32_t price;
	uint32_t timestamp;
	uint16_t amount;
	uint16_t counter;
	uint16_t itemId;
	uint16_t tier;
	std::string playerName;
};

struct MarketOfferEx {
	MarketOfferEx() = default;
	MarketOfferEx(MarketOfferEx&& other) :
		id(other.id), playerId(other.playerId), timestamp(other.timestamp), price(other.price),
		amount(other.amount), counter(other.counter), itemId(other.itemId), tier(other.tier), type(other.type),
		playerName(std::move(other.playerName)) {}

	uint32_t id;
	uint32_t playerId;
	uint32_t timestamp;
	uint32_t price;
	uint16_t amount;
	uint16_t counter;
	uint16_t itemId;
	uint16_t tier;
	MarketAction_t type;
	std::string playerName;
};

struct HistoryMarketOffer {
	HistoryMarketOffer() = default;
	HistoryMarketOffer(uint32_t timestamp, uint32_t price, uint16_t itemId, uint16_t tier, uint16_t amount, MarketOfferState_t state) :
		timestamp(timestamp), price(price), itemId(itemId), tier(tier), amount(amount), state(state) {}

	uint32_t timestamp;
	uint32_t price;
	uint16_t itemId;
	uint16_t tier;
	uint16_t amount;
	MarketOfferState_t state;
};

struct MarketStatisticInfo {
	uint16_t tier = 0;
	uint64_t price = 0;
};

struct MarketStatistics {
	uint8_t itemTier = 0;
	uint32_t numTransactions = 0;
	uint32_t highestPrice = 0;
	uint64_t totalPrice = 0;
	uint32_t lowestPrice = 0;
};

struct ModalWindow
{
	std::list<std::pair<std::string, uint8_t>> buttons, choices;
	std::string title, message;
	uint32_t id;
	uint8_t defaultEnterButton, defaultEscapeButton;
	bool priority;

	ModalWindow(uint32_t newId, std::string newTitle, std::string newMessage)
		: title(std::move(newTitle)), message(std::move(newMessage)), id(newId), defaultEnterButton(0xFF), defaultEscapeButton(0xFF), priority(false) {}
};

enum CombatOrigin
{
	ORIGIN_NONE,
	ORIGIN_CONDITION,
	ORIGIN_SPELL,
	ORIGIN_MELEE,
	ORIGIN_RANGED,
};

struct CombatDamage
{
	struct {
		CombatType_t type;
		int64_t value;
	} primary, secondary;

	CombatOrigin origin;
	bool critical;
	bool fatal;
	int affected;
	bool extension;
	bool canTrigerCharm;
	bool canTrigerLeach;
	bool cleave;
	std::string exString;
	
	int32_t criticalDamage;
	int32_t criticalChance;
	int32_t damageMultiplier;
	int32_t damageReductionMultiplier;
	int32_t healingMultiplier;
	int32_t manaLeech;
	int32_t lifeLeech;
	int32_t healingLink;

	std::string instantSpellName;
	std::string runeSpellName;

	CombatDamage()
	{
		origin = ORIGIN_NONE;
		primary.type = secondary.type = COMBAT_NONE;
		primary.value = secondary.value = 0;
		critical = false;
		fatal = false;
		affected = 1;
		cleave = false;
		extension = false;
		canTrigerCharm = true;
		canTrigerLeach = true;
		exString = "";
		criticalDamage = 0;
		criticalChance = 0;
		damageMultiplier = 0;
		damageReductionMultiplier = 0;
		healingMultiplier = 0;
		manaLeech = 0;
		lifeLeech = 0;
		healingLink = 0;
		instantSpellName = "";
		runeSpellName = "";
	}
};

using StashItemList = std::map<uint16_t, uint32_t>;
using MarketOfferList = std::list<MarketOffer>;
using HistoryMarketOfferList = std::list<HistoryMarketOffer>;
using ShopInfoList = std::vector<ShopInfo>;

enum MonstersEvent_t : uint8_t {
	MONSTERS_EVENT_NONE = 0,
	MONSTERS_EVENT_THINK = 1,
	MONSTERS_EVENT_APPEAR = 2,
	MONSTERS_EVENT_DISAPPEAR = 3,
	MONSTERS_EVENT_MOVE = 4,
	MONSTERS_EVENT_SAY = 5,
};

enum Supply_Stash_Actions_t : uint8_t {
	SUPPLY_STASH_ACTION_STOW_ITEM = 0,
	SUPPLY_STASH_ACTION_STOW_CONTAINER = 1,
	SUPPLY_STASH_ACTION_STOW_STACK = 2,
	SUPPLY_STASH_ACTION_WITHDRAW = 3
};

enum Daily_Reward_Bonus : uint8_t {
	DAILY_REWARD_FIRST = 2,

	DAILY_REWARD_HP_REGENERATION = 2,
	DAILY_REWARD_MP_REGENERATION = 3,
	DAILY_REWARD_STAMINA_REGENERATION = 4,
	DAILY_REWARD_DOUBLE_HP_REGENERATION = 5,
	DAILY_REWARD_DOUBLE_MP_REGENERATION = 6,
	DAILY_REWARD_SOUL_REGENERATION = 7,

	DAILY_REWARD_LAST = 7,
};

enum Daily_Reward_Status : uint8_t {
	DAILY_REWARD_COLLECTED = 0,
	DAILY_REWARD_NOTCOLLECTED = 1,
	DAILY_REWARD_NOTAVAILABLE = 2
};

enum Resource_t : uint8_t
{
	RESOURCE_BANK = 0x00,
	RESOURCE_INVENTORY = 0x01,
	RESOURCE_PREY_CARDS = 0x0A,
	RESOURCE_TASK_HUNTING = 0x32,
	RESOURCE_DUST = 70,
	RESOURCE_SLIVER = 71,
	RESOURCE_EXALTED_CORE = 72,
};

enum MagicEffectsType_t : uint8_t {
  MAGIC_EFFECTS_END_LOOP = 0,//ends magic effect loop
  MAGIC_EFFECTS_DELTA = 1,//needs uint8_t delta after type to adjust position
  MAGIC_EFFECTS_DELAY = 2,//needs uint16_t delay after type to delay in miliseconds effect display
  MAGIC_EFFECTS_CREATE_EFFECT = 3,//needs uint8_t effectid after type
  MAGIC_EFFECTS_CREATE_DISTANCEEFFECT = 4,//needs uint8_t and deltaX(int8_t), deltaY(int8_t) after type
  MAGIC_EFFECTS_CREATE_DISTANCEEFFECT_REVERSED = 5,//needs uint8_t and deltaX(int8_t), deltaY(int8_t) after type
  MAGIC_EFFECTS_CREATE_SOUND_MAIN_EFFECT = 6, // needs uint16_t after type
  MAGIC_EFFECTS_CREATE_SOUND_SECONDARY_EFFECT = 7,// needs uint8_t and uint16_t after type
};

enum InspectObjectTypes : uint8_t {
	INSPECT_NORMALOBJECT = 0,
	INSPECT_NPCTRADE = 1,
	INSPECT_UNKNOWN = 2,
	INSPECT_CYCLOPEDIA = 3
};

enum ImpactAnalyzerAndTracker_t : uint8_t {
	ANALYZER_HEAL = 0,
	ANALYZER_DAMAGE_DEALT = 1,
	ANALYZER_DAMAGE_RECEIVED = 2
};

enum CyclopediaCharacterInfoType_t : uint8_t {
	CYCLOPEDIA_CHARACTERINFO_BASEINFORMATION = 0,
	CYCLOPEDIA_CHARACTERINFO_GENERALSTATS = 1,
	CYCLOPEDIA_CHARACTERINFO_COMBATSTATS = 2,
	CYCLOPEDIA_CHARACTERINFO_RECENTDEATHS = 3,
	CYCLOPEDIA_CHARACTERINFO_RECENTPVPKILLS = 4,
	CYCLOPEDIA_CHARACTERINFO_ACHIEVEMENTS = 5,
	CYCLOPEDIA_CHARACTERINFO_ITEMSUMMARY = 6,
	CYCLOPEDIA_CHARACTERINFO_OUTFITSMOUNTS = 7,
	CYCLOPEDIA_CHARACTERINFO_STORESUMMARY = 8,
	CYCLOPEDIA_CHARACTERINFO_INSPECTION = 9,
	CYCLOPEDIA_CHARACTERINFO_BADGES = 10,
	CYCLOPEDIA_CHARACTERINFO_TITLES = 11
};

enum CyclopediaCharacterInfo_OutfitType_t : uint8_t {
	CYCLOPEDIA_CHARACTERINFO_OUTFITTYPE_NONE = 0,
	CYCLOPEDIA_CHARACTERINFO_OUTFITTYPE_QUEST = 1,
	CYCLOPEDIA_CHARACTERINFO_OUTFITTYPE_STORE = 2
};

enum CyclopediaCharacterInfo_RecentKillStatus_t : uint8_t {
	CYCLOPEDIA_CHARACTERINFO_RECENTKILLSTATUS_JUSTIFIED = 0,
	CYCLOPEDIA_CHARACTERINFO_RECENTKILLSTATUS_UNJUSTIFIED = 1,
	CYCLOPEDIA_CHARACTERINFO_RECENTKILLSTATUS_GUILDWAR = 2,
	CYCLOPEDIA_CHARACTERINFO_RECENTKILLSTATUS_ASSISTED = 3,
	CYCLOPEDIA_CHARACTERINFO_RECENTKILLSTATUS_ARENA = 4
};

struct RecentDeathEntry
{
	RecentDeathEntry(std::string cause, uint32_t timestamp) :
		cause(std::move(cause)), timestamp(timestamp) {}

	std::string cause;
	uint32_t timestamp;
};

struct RecentPvPKillEntry
{
	RecentPvPKillEntry(std::string description, uint32_t timestamp, uint8_t status) :
		description(std::move(description)), timestamp(timestamp), status(status) {}

	std::string description;
	uint32_t timestamp;
	uint8_t status;
};

enum ForgeDefaultAction_t : uint8_t {
	FORGE_ACTION_FUSION,
	FORGE_ACTION_TRANSFER,
	FORGE_ACTION_DUST,
	FORGE_ACTION_SLIVER,
	FORGE_ACTION_LIMIT
};

enum HighscoreType_t : uint8_t {
	HIGHSCORE_GETENTRIES = 0,
	HIGHSCORE_OURRANK = 1
};

enum HighscoreCategories_t : uint8_t {
	HIGHSCORE_CATEGORY_EXPERIENCE = 0,
	HIGHSCORE_CATEGORY_FIST_FIGHTING,
	HIGHSCORE_CATEGORY_CLUB_FIGHTING,
	HIGHSCORE_CATEGORY_SWORD_FIGHTING,
	HIGHSCORE_CATEGORY_AXE_FIGHTING,
	HIGHSCORE_CATEGORY_DISTANCE_FIGHTING,
	HIGHSCORE_CATEGORY_SHIELDING,
	HIGHSCORE_CATEGORY_FISHING,
	HIGHSCORE_CATEGORY_MAGIC_LEVEL
};

struct HighscoreCategory
{
	HighscoreCategory(const char* name, uint8_t id) :
		name(name), id(id) {}

	const char* name;
	uint8_t id;
};

struct HighscoreCharacter
{
	HighscoreCharacter(std::string name, uint64_t points, uint32_t id, uint32_t rank, uint16_t level, uint8_t vocation) :
		name(std::move(name)), points(points), id(id), rank(rank), level(level), vocation(vocation) {}

	std::string name;
	uint64_t points;
	uint32_t id;
	uint32_t rank;
	uint16_t level;
	uint8_t vocation;
};

// Monsters
enum TargetSearchType_t {
	TARGETSEARCH_DEFAULT,
	TARGETSEARCH_NEAREST,
	TARGETSEARCH_HP,
	TARGETSEARCH_DAMAGE,
	TARGETSEARCH_RANDOM
};

struct summonBlock_t {
	std::string name;
	uint32_t chance;
	uint32_t speed;
	uint32_t max;
	bool force = false;
};

struct voiceBlock_t {
	std::string text;
	bool yellText;
};

struct LootBlock {
	uint16_t id;
	uint32_t countmax;
	uint32_t countmin;
	uint32_t chance;

	//optional
	int32_t subType;
	int32_t actionId;
	std::string text;
	std::string name;
	std::string article;
	int32_t attack;
	int32_t defense;
	int32_t extraDefense;
	int32_t armor;
	int32_t shootRange;
	int32_t hitChance;
	bool unique;

	std::vector<LootBlock> childLoot;
	LootBlock() {
		id = 0;
		countmax = 1;
		countmin = 1;
		chance = 0;

		subType = -1;
		actionId = -1;
		attack = -1;
		defense = -1;
		extraDefense = -1;
		armor = -1;
		shootRange = -1;
		hitChance = -1;
		unique = false;
	}
};

enum Cipbia_Elementals_t : uint8_t {
	CIPBIA_ELEMENTAL_PHYSICAL = 0,
	CIPBIA_ELEMENTAL_FIRE = 1,
	CIPBIA_ELEMENTAL_EARTH = 2,
	CIPBIA_ELEMENTAL_ENERGY = 3,
	CIPBIA_ELEMENTAL_ICE = 4,
	CIPBIA_ELEMENTAL_HOLY = 5,
	CIPBIA_ELEMENTAL_DEATH = 6,
	CIPBIA_ELEMENTAL_HEALING = 7,
	CIPBIA_ELEMENTAL_DROWN = 8,
	CIPBIA_ELEMENTAL_LIFEDRAIN = 9,
	CIPBIA_ELEMENTAL_UNDEFINED = 10
};

enum Webhook_Colors_t : uint32_t {
	WEBHOOK_COLOR_ONLINE = 0x00FF00,
	WEBHOOK_COLOR_OFFLINE = 0xFF0000,
	WEBHOOK_COLOR_WARNING = 0xFFFF00,
	WEBHOOK_COLOR_RAID = 0x0000FF
};

enum SessionEndInformations : uint8_t {
	// I'm guessing unknown types are ban/protocol error or something
	// but since there aren't any difference from logout should we care?
	SESSION_END_LOGOUT,  // work only with standard logout
	SESSION_END_UNK2,
	SESSION_END_FORCECLOSE,
	SESSION_END_LOGOUT2, // work with standard logout and offline training logout
};

/**
  * [OTServer BR]
  * Team assemble finder.
  * This class is responsible control and manage the team finder feature.
**/

class TeamFinder
{
 public:
	TeamFinder() = default;
	TeamFinder(uint16_t initMinLevel, uint16_t initMaxLevel, uint8_t initVocationIDs, uint16_t initTeamSlots, uint16_t initFreeSlots, bool initPartyBool, uint32_t initTimestamp, uint8_t initTeamType, uint16_t initBossID, uint16_t initHunt_type, uint16_t initHunt_area, uint16_t initQuestID, uint32_t initLeaderGuid, std::map<uint32_t, uint8_t> initMembersMap) :
		minLevel(initMinLevel), maxLevel(initMaxLevel), vocationIDs(initVocationIDs), teamSlots(initTeamSlots), freeSlots(initFreeSlots), partyBool(initPartyBool), timestamp(initTimestamp), teamType(initTeamType), bossID(initBossID), hunt_type(initHunt_type), hunt_area(initHunt_area), questID(initQuestID), leaderGuid(initLeaderGuid), membersMap(initMembersMap) {}
	virtual ~TeamFinder() = default;

	uint16_t minLevel = 0;
	uint16_t maxLevel = 0;
	uint8_t vocationIDs = 0;
	uint16_t teamSlots = 0;
	uint16_t freeSlots = 0;
	bool partyBool = false;
	uint32_t timestamp = 0;
	uint8_t teamType = 0;
	uint16_t bossID = 0;
	uint16_t hunt_type = 0;
	uint16_t hunt_area = 0;
	uint16_t questID = 0;
	uint32_t leaderGuid = 0;
	std::map<uint32_t, uint8_t> membersMap = {}; // list: player:getGuid(), player status
};

enum ForgeAction_t
{
	FORGEACTION_FUSION,
	FORGEACTION_TRANSFER,
	FORGEACTION_CONVERSION
};

enum ExaltedForgeBonus_t {
	BONUS_NULL,
	BONUS_DUST,
	BONUS_CORE,
	BONUS_GOLD,
	BONUS_KEEP_TIER_SUCESS,
	BONUS_KEEP_ITEM_TIER,
	BONUS_BOTH_TIER_UPGRADE,
	BONUS_DOUBLE_TIER_UPGRADE,
	BONUS_KEEP_TIER_FAIL,
};

struct ExaltedHistory
{
	uint32_t time;
	ForgeAction_t action;
	std::string message;
	uint8_t error;
};

#endif
